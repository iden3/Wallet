2bbeedc0681820ec8b7d4cfb7a325063
"use strict";

(function () {
  var enterModule = require('react-hot-loader').enterModule;

  enterModule && enterModule(module);
})();

var webpack = require('webpack');

var UglifyJsPlugin = require('uglifyjs-webpack-plugin'); // create a CSS file per JS file which contains CSS


var MiniCssExtractPlugin = require('mini-css-extract-plugin'); // optimize and minimize the CSS


var OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');

var merge = require('webpack-merge');

var common = require('./webpack.config.js'); // some libraries look for process.env.NODE_ENV to optimize and webpack doesn't include it


var environmentPlugin = new webpack.DefinePlugin({
  'process.env.NODE_ENV': JSON.stringify('production')
});
var miniCssExtractPlugin = new MiniCssExtractPlugin({
  filename: '[name].[hash].css',
  chunkFilename: '[id].[hash].css'
});
module.exports = merge(common, {
  devtool: 'source-map',
  mode: 'production',
  optimization: {
    minimizer: [new UglifyJsPlugin({
      cache: true,
      parallel: true,
      sourceMap: true // set to true to have JS source maps

    }), new OptimizeCSSAssetsPlugin({})]
  },
  plugins: [miniCssExtractPlugin, environmentPlugin],
  module: {
    rules: [{
      test: /\.(sa|sc|c)ss$/,
      use: [MiniCssExtractPlugin.loader, {
        loader: 'css-loader',
        // to resolve css files
        options: {
          // make CSS modular, class name will be scoped locally and specific to only the component in question
          modules: true,
          importLoaders: 1,
          // to configure the generated identification: [name of the component]_[name of class/id]_[random unique hash]
          localIdentName: '[name]_[local]_[hash:base64]',
          sourceMap: true,
          minimize: true
        }
      }, // Loads a Sass/SCSS file and compiles it to CSS
      'sass-loader']
    }]
  }
});
;

(function () {
  var reactHotLoader = require('react-hot-loader').default;

  var leaveModule = require('react-hot-loader').leaveModule;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(environmentPlugin, "environmentPlugin", "/home/charly/Uniclau/Iden3/web-wallet/webpack.prod.js");
  reactHotLoader.register(miniCssExtractPlugin, "miniCssExtractPlugin", "/home/charly/Uniclau/Iden3/web-wallet/webpack.prod.js");
  leaveModule(module);
})();

;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2sucHJvZC5qcyJdLCJuYW1lcyI6WyJ3ZWJwYWNrIiwicmVxdWlyZSIsIlVnbGlmeUpzUGx1Z2luIiwiTWluaUNzc0V4dHJhY3RQbHVnaW4iLCJPcHRpbWl6ZUNTU0Fzc2V0c1BsdWdpbiIsIm1lcmdlIiwiY29tbW9uIiwiZW52aXJvbm1lbnRQbHVnaW4iLCJEZWZpbmVQbHVnaW4iLCJKU09OIiwic3RyaW5naWZ5IiwibWluaUNzc0V4dHJhY3RQbHVnaW4iLCJmaWxlbmFtZSIsImNodW5rRmlsZW5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGV2dG9vbCIsIm1vZGUiLCJvcHRpbWl6YXRpb24iLCJtaW5pbWl6ZXIiLCJjYWNoZSIsInBhcmFsbGVsIiwic291cmNlTWFwIiwicGx1Z2lucyIsInJ1bGVzIiwidGVzdCIsInVzZSIsImxvYWRlciIsIm9wdGlvbnMiLCJtb2R1bGVzIiwiaW1wb3J0TG9hZGVycyIsImxvY2FsSWRlbnROYW1lIiwibWluaW1pemUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUF2Qjs7QUFDQSxJQUFNQyxjQUFjLEdBQUdELE9BQU8sQ0FBQyx5QkFBRCxDQUE5QixDLENBQ0E7OztBQUNBLElBQU1FLG9CQUFvQixHQUFHRixPQUFPLENBQUMseUJBQUQsQ0FBcEMsQyxDQUNBOzs7QUFDQSxJQUFNRyx1QkFBdUIsR0FBR0gsT0FBTyxDQUFDLG9DQUFELENBQXZDOztBQUNBLElBQU1JLEtBQUssR0FBR0osT0FBTyxDQUFDLGVBQUQsQ0FBckI7O0FBQ0EsSUFBTUssTUFBTSxHQUFHTCxPQUFPLENBQUMscUJBQUQsQ0FBdEIsQyxDQUVBOzs7QUFDQSxJQUFNTSxpQkFBaUIsR0FBRyxJQUFJUCxPQUFPLENBQUNRLFlBQVosQ0FBeUI7QUFDakQsMEJBQXdCQyxJQUFJLENBQUNDLFNBQUwsQ0FBZSxZQUFmO0FBRHlCLENBQXpCLENBQTFCO0FBR0EsSUFBTUMsb0JBQW9CLEdBQUcsSUFBSVIsb0JBQUosQ0FBeUI7QUFDcERTLEVBQUFBLFFBQVEsRUFBRSxtQkFEMEM7QUFFcERDLEVBQUFBLGFBQWEsRUFBRTtBQUZxQyxDQUF6QixDQUE3QjtBQUtBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJWLEtBQUssQ0FBQ0MsTUFBRCxFQUFTO0FBQzdCVSxFQUFBQSxPQUFPLEVBQUUsWUFEb0I7QUFFN0JDLEVBQUFBLElBQUksRUFBRSxZQUZ1QjtBQUc3QkMsRUFBQUEsWUFBWSxFQUFFO0FBQ1pDLElBQUFBLFNBQVMsRUFBRSxDQUNULElBQUlqQixjQUFKLENBQW1CO0FBQ2pCa0IsTUFBQUEsS0FBSyxFQUFFLElBRFU7QUFFakJDLE1BQUFBLFFBQVEsRUFBRSxJQUZPO0FBR2pCQyxNQUFBQSxTQUFTLEVBQUUsSUFITSxDQUdBOztBQUhBLEtBQW5CLENBRFMsRUFNVCxJQUFJbEIsdUJBQUosQ0FBNEIsRUFBNUIsQ0FOUztBQURDLEdBSGU7QUFhN0JtQixFQUFBQSxPQUFPLEVBQUUsQ0FDUFosb0JBRE8sRUFFUEosaUJBRk8sQ0Fib0I7QUFpQjdCTyxFQUFBQSxNQUFNLEVBQUU7QUFDTlUsSUFBQUEsS0FBSyxFQUFFLENBQ0w7QUFDRUMsTUFBQUEsSUFBSSxFQUFFLGdCQURSO0FBRUVDLE1BQUFBLEdBQUcsRUFBRSxDQUNIdkIsb0JBQW9CLENBQUN3QixNQURsQixFQUVIO0FBQ0VBLFFBQUFBLE1BQU0sRUFBRSxZQURWO0FBQ3dCO0FBQ3RCQyxRQUFBQSxPQUFPLEVBQUU7QUFDUDtBQUNBQyxVQUFBQSxPQUFPLEVBQUUsSUFGRjtBQUdQQyxVQUFBQSxhQUFhLEVBQUUsQ0FIUjtBQUlQO0FBQ0FDLFVBQUFBLGNBQWMsRUFBRSw4QkFMVDtBQU1QVCxVQUFBQSxTQUFTLEVBQUUsSUFOSjtBQU9QVSxVQUFBQSxRQUFRLEVBQUU7QUFQSDtBQUZYLE9BRkcsRUFjSDtBQUNBLG1CQWZHO0FBRlAsS0FESztBQUREO0FBakJxQixDQUFULENBQXRCOzs7Ozs7Ozs7Ozs7MEJBUk16QixpQjswQkFHQUksb0IiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB3ZWJwYWNrID0gcmVxdWlyZSgnd2VicGFjaycpO1xuY29uc3QgVWdsaWZ5SnNQbHVnaW4gPSByZXF1aXJlKCd1Z2xpZnlqcy13ZWJwYWNrLXBsdWdpbicpO1xuLy8gY3JlYXRlIGEgQ1NTIGZpbGUgcGVyIEpTIGZpbGUgd2hpY2ggY29udGFpbnMgQ1NTXG5jb25zdCBNaW5pQ3NzRXh0cmFjdFBsdWdpbiA9IHJlcXVpcmUoJ21pbmktY3NzLWV4dHJhY3QtcGx1Z2luJyk7XG4vLyBvcHRpbWl6ZSBhbmQgbWluaW1pemUgdGhlIENTU1xuY29uc3QgT3B0aW1pemVDU1NBc3NldHNQbHVnaW4gPSByZXF1aXJlKCdvcHRpbWl6ZS1jc3MtYXNzZXRzLXdlYnBhY2stcGx1Z2luJyk7XG5jb25zdCBtZXJnZSA9IHJlcXVpcmUoJ3dlYnBhY2stbWVyZ2UnKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vd2VicGFjay5jb25maWcuanMnKTtcblxuLy8gc29tZSBsaWJyYXJpZXMgbG9vayBmb3IgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgdG8gb3B0aW1pemUgYW5kIHdlYnBhY2sgZG9lc24ndCBpbmNsdWRlIGl0XG5jb25zdCBlbnZpcm9ubWVudFBsdWdpbiA9IG5ldyB3ZWJwYWNrLkRlZmluZVBsdWdpbih7XG4gICdwcm9jZXNzLmVudi5OT0RFX0VOVic6IEpTT04uc3RyaW5naWZ5KCdwcm9kdWN0aW9uJyksXG59KTtcbmNvbnN0IG1pbmlDc3NFeHRyYWN0UGx1Z2luID0gbmV3IE1pbmlDc3NFeHRyYWN0UGx1Z2luKHtcbiAgZmlsZW5hbWU6ICdbbmFtZV0uW2hhc2hdLmNzcycsXG4gIGNodW5rRmlsZW5hbWU6ICdbaWRdLltoYXNoXS5jc3MnLFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbWVyZ2UoY29tbW9uLCB7XG4gIGRldnRvb2w6ICdzb3VyY2UtbWFwJyxcbiAgbW9kZTogJ3Byb2R1Y3Rpb24nLFxuICBvcHRpbWl6YXRpb246IHtcbiAgICBtaW5pbWl6ZXI6IFtcbiAgICAgIG5ldyBVZ2xpZnlKc1BsdWdpbih7XG4gICAgICAgIGNhY2hlOiB0cnVlLFxuICAgICAgICBwYXJhbGxlbDogdHJ1ZSxcbiAgICAgICAgc291cmNlTWFwOiB0cnVlLCAvLyBzZXQgdG8gdHJ1ZSB0byBoYXZlIEpTIHNvdXJjZSBtYXBzXG4gICAgICB9KSxcbiAgICAgIG5ldyBPcHRpbWl6ZUNTU0Fzc2V0c1BsdWdpbih7fSksXG4gICAgXSxcbiAgfSxcbiAgcGx1Z2luczogW1xuICAgIG1pbmlDc3NFeHRyYWN0UGx1Z2luLFxuICAgIGVudmlyb25tZW50UGx1Z2luLFxuICBdLFxuICBtb2R1bGU6IHtcbiAgICBydWxlczogW1xuICAgICAge1xuICAgICAgICB0ZXN0OiAvXFwuKHNhfHNjfGMpc3MkLyxcbiAgICAgICAgdXNlOiBbXG4gICAgICAgICAgTWluaUNzc0V4dHJhY3RQbHVnaW4ubG9hZGVyLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGxvYWRlcjogJ2Nzcy1sb2FkZXInLCAvLyB0byByZXNvbHZlIGNzcyBmaWxlc1xuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAvLyBtYWtlIENTUyBtb2R1bGFyLCBjbGFzcyBuYW1lIHdpbGwgYmUgc2NvcGVkIGxvY2FsbHkgYW5kIHNwZWNpZmljIHRvIG9ubHkgdGhlIGNvbXBvbmVudCBpbiBxdWVzdGlvblxuICAgICAgICAgICAgICBtb2R1bGVzOiB0cnVlLFxuICAgICAgICAgICAgICBpbXBvcnRMb2FkZXJzOiAxLFxuICAgICAgICAgICAgICAvLyB0byBjb25maWd1cmUgdGhlIGdlbmVyYXRlZCBpZGVudGlmaWNhdGlvbjogW25hbWUgb2YgdGhlIGNvbXBvbmVudF1fW25hbWUgb2YgY2xhc3MvaWRdX1tyYW5kb20gdW5pcXVlIGhhc2hdXG4gICAgICAgICAgICAgIGxvY2FsSWRlbnROYW1lOiAnW25hbWVdX1tsb2NhbF1fW2hhc2g6YmFzZTY0XScsXG4gICAgICAgICAgICAgIHNvdXJjZU1hcDogdHJ1ZSxcbiAgICAgICAgICAgICAgbWluaW1pemU6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgLy8gTG9hZHMgYSBTYXNzL1NDU1MgZmlsZSBhbmQgY29tcGlsZXMgaXQgdG8gQ1NTXG4gICAgICAgICAgJ3Nhc3MtbG9hZGVyJyxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbn0pO1xuIl19