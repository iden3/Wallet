{"version":3,"sources":["portal.js"],"names":["Portal","document","createElement","props","parentId","getElementById","appendChild","domNode","parentClassName","getElementsByClassName","removeChild","ReactDOM","createPortal","children","Component","PropTypes","node","string"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;IAOMA,M;;;;;;;;;;;;;;;;;;sFAEMC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,C;;;;;;;;AAqBV;;;;wCAIoB;AAClB,UAAI,KAAKC,KAAL,CAAWC,QAAX,IAAuBH,QAAQ,CAACI,cAAT,CAAwB,KAAKF,KAAL,CAAWC,QAAnC,CAA3B,EAAyE;AACvEH,QAAAA,QAAQ,CAACI,cAAT,CAAwB,KAAKF,KAAL,CAAWC,QAAnC,EAA6CE,WAA7C,CAAyD,KAAKC,OAA9D;AACD;;AAED,UAAI,KAAKJ,KAAL,CAAWK,eAAX,IAA8BP,QAAQ,CAACQ,sBAAT,CAAgC,KAAKN,KAAL,CAAWK,eAA3C,EAA4D,CAA5D,CAAlC,EAAkG;AAChGP,QAAAA,QAAQ,CAACQ,sBAAT,CAAgC,KAAKN,KAAL,CAAWK,eAA3C,EAA4D,CAA5D,EAA+DF,WAA/D,CAA2E,KAAKC,OAAhF;AACD;AACF;AAED;;;;;;2CAGuB;AACrB,UAAI,KAAKJ,KAAL,CAAWC,QAAX,IAAuBH,QAAQ,CAACI,cAAT,CAAwB,KAAKF,KAAL,CAAWC,QAAnC,CAA3B,EAAyE;AACvEH,QAAAA,QAAQ,CAACI,cAAT,CAAwB,KAAKF,KAAL,CAAWC,QAAnC,EAA6CM,WAA7C,CAAyD,KAAKH,OAA9D;AACD;;AAED,UAAI,KAAKJ,KAAL,CAAWK,eAAX,IAA8BP,QAAQ,CAACQ,sBAAT,CAAgC,KAAKN,KAAL,CAAWK,eAA3C,EAA4D,CAA5D,CAAlC,EAAkG;AAChGP,QAAAA,QAAQ,CAACQ,sBAAT,CAAgC,KAAKN,KAAL,CAAWK,eAA3C,EAA4D,CAA5D,EAA+DE,WAA/D,CAA2E,KAAKH,OAAhF;AACD;AACF;;;6BAEQ;AACP,aAAOI,kBAASC,YAAT,CACL,KAAKT,KAAL,CAAWU,QADN,EAEL,KAAKN,OAFA,CAAP;AAID;;;;;;;;;;;EAvDkBO,gB;;gBAAfd,M,eAIe;AACjB;;;AAGAa,EAAAA,QAAQ,EAAEE,mBAAUC,IAJH;;AAKjB;;;AAGAZ,EAAAA,QAAQ,EAAEW,mBAAUE,MARH;;AASjB;;;AAGAT,EAAAA,eAAe,EAAEO,mBAAUE;AAZV,C;;gBAJfjB,M,kBAmBkB;AACpBQ,EAAAA,eAAe,EAAE;AADG,C;;eAuCTR,M;;;;;;;;;;;;;;0BA1DTA,M","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\n\n/**\n * A portal component that allows components to render elements\n * outside of their own markup. It creates a div HTML element to\n * inject the children sent by other component. I.e. will be used\n * to show content in a pop-up or in a side-bar. We need to send\n * information to there.\n */\nclass Portal extends Component {\n  // domNode where to inject the sent content\n  domNode = document.createElement('div');\n\n  static propTypes = {\n    /*\n     The content to be shown\n     */\n    children: PropTypes.node,\n    /*\n    The id of the container to inject the content\n     */\n    parentId: PropTypes.string,\n    /*\n    The class name of the container to inject the content\n     */\n    parentClassName: PropTypes.string,\n  };\n\n  static defaultProps = {\n    parentClassName: 'i3-ww-popups',\n  };\n\n  /**\n   * Once component mounted and portal created, check where is the container\n   * to inject the sent content. We will check for an Id or ClassName\n   */\n  componentDidMount() {\n    if (this.props.parentId && document.getElementById(this.props.parentId)) {\n      document.getElementById(this.props.parentId).appendChild(this.domNode);\n    }\n\n    if (this.props.parentClassName && document.getElementsByClassName(this.props.parentClassName)[0]) {\n      document.getElementsByClassName(this.props.parentClassName)[0].appendChild(this.domNode);\n    }\n  }\n\n  /**\n   * Once component has been unmounted remove the portal created\n   */\n  componentWillUnmount() {\n    if (this.props.parentId && document.getElementById(this.props.parentId)) {\n      document.getElementById(this.props.parentId).removeChild(this.domNode);\n    }\n\n    if (this.props.parentClassName && document.getElementsByClassName(this.props.parentClassName)[0]) {\n      document.getElementsByClassName(this.props.parentClassName)[0].removeChild(this.domNode);\n    }\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      this.props.children,\n      this.domNode,\n    );\n  }\n}\n\nexport default Portal;\n"]}