{"version":3,"sources":["reducer.js"],"names":["initialState","ImmutableMap","error","isFetchingClaims","received","emitted","grouped","claims","state","action","type","FETCHING_EMITTED_CLAIMS","merge","FETCHING_EMITTED_CLAIMS_SUCCESS","data","FETCHING_EMITTED_CLAIMS_ERROR","FETCHING_RECEIVED_CLAIMS","FETCHING_RECEIVED_CLAIMS_SUCCESS","FETCHING_RECEIVED_CLAIMS_ERROR"],"mappings":";;;;;;;AAAA;;AAIA;;;;;;;;AASA,IAAMA,YAAY,GAAG,IAAIC,cAAJ,CAAiB;AACpCC,EAAAA,KAAK,EAAE,EAD6B;AAEpCC,EAAAA,gBAAgB,EAAE,IAFkB;AAGpCC,EAAAA,QAAQ,EAAE,qBAH0B;AAIpCC,EAAAA,OAAO,EAAE,qBAJ2B;AAKpCC,EAAAA,OAAO,EAAE;AAL2B,CAAjB,CAArB;;AAQA,SAASC,MAAT,GAA8C;AAAA,MAA9BC,KAA8B,uEAAtBR,YAAsB;AAAA,MAARS,MAAQ;;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKC,kCAAL;AACE,aAAOH,KAAK,CAACI,KAAN,CAAY;AACjBT,QAAAA,gBAAgB,EAAE;AADD,OAAZ,CAAP;;AAGF,SAAKU,0CAAL;AACE,aAAOL,KAAK,CAACI,KAAN,CAAY;AACjBT,QAAAA,gBAAgB,EAAE,KADD;AAEjBE,QAAAA,OAAO,EAAEI,MAAM,CAACK;AAFC,OAAZ,CAAP;;AAIF,SAAKC,wCAAL;AACE,aAAOP,KAAK,CAACI,KAAN,CAAY;AACjBT,QAAAA,gBAAgB,EAAE,KADD;AAEjBE,QAAAA,OAAO,EAAE,qBAFQ;AAGjBH,QAAAA,KAAK,EAAEO,MAAM,CAACP;AAHG,OAAZ,CAAP;;AAKF,SAAKc,mCAAL;AACE,aAAOR,KAAK,CAACI,KAAN,CAAY;AACjBT,QAAAA,gBAAgB,EAAE;AADD,OAAZ,CAAP;;AAGF,SAAKc,2CAAL;AACE,aAAOT,KAAK,CAACI,KAAN,CAAY;AACjBT,QAAAA,gBAAgB,EAAE,KADD;AAEjBC,QAAAA,QAAQ,EAAEK,MAAM,CAACK;AAFA,OAAZ,CAAP;;AAIF,SAAKI,yCAAL;AACE,aAAOV,KAAK,CAACI,KAAN,CAAY;AACjBT,QAAAA,gBAAgB,EAAE,KADD;AAEjBC,QAAAA,QAAQ,EAAE,qBAFO;AAGjBF,QAAAA,KAAK,EAAEO,MAAM,CAACP;AAHG,OAAZ,CAAP;;AAKF;AACE,aAAOM,KAAP;AAhCJ;AAkCD;;eAEcD,M;;;;;;;;;;;;;;0BA7CTP,Y;0BAQGO,M","sourcesContent":["import {\n  Map as ImmutableMap,\n  List as ImmutableList,\n} from 'immutable';\nimport {\n  FETCHING_EMITTED_CLAIMS,\n  FETCHING_EMITTED_CLAIMS_ERROR,\n  FETCHING_EMITTED_CLAIMS_SUCCESS,\n  FETCHING_RECEIVED_CLAIMS,\n  FETCHING_RECEIVED_CLAIMS_ERROR,\n  FETCHING_RECEIVED_CLAIMS_SUCCESS,\n} from './constants';\n\nconst initialState = new ImmutableMap({\n  error: '',\n  isFetchingClaims: true,\n  received: ImmutableMap(),\n  emitted: ImmutableMap(),\n  grouped: ImmutableList(),\n});\n\nfunction claims(state = initialState, action) {\n  switch (action.type) {\n    case FETCHING_EMITTED_CLAIMS:\n      return state.merge({\n        isFetchingClaims: true,\n      });\n    case FETCHING_EMITTED_CLAIMS_SUCCESS:\n      return state.merge({\n        isFetchingClaims: false,\n        emitted: action.data,\n      });\n    case FETCHING_EMITTED_CLAIMS_ERROR:\n      return state.merge({\n        isFetchingClaims: false,\n        emitted: ImmutableMap(),\n        error: action.error,\n      });\n    case FETCHING_RECEIVED_CLAIMS:\n      return state.merge({\n        isFetchingClaims: true,\n      });\n    case FETCHING_RECEIVED_CLAIMS_SUCCESS:\n      return state.merge({\n        isFetchingClaims: false,\n        received: action.data,\n      });\n    case FETCHING_RECEIVED_CLAIMS_ERROR:\n      return state.merge({\n        isFetchingClaims: false,\n        received: ImmutableMap(),\n        error: action.error,\n      });\n    default:\n      return state;\n  }\n}\n\nexport default claims;\n"]}