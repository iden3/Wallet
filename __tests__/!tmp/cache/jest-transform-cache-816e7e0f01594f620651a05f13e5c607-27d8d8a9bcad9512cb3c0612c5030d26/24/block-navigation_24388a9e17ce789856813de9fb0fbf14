412e265597dce5fb6db1dc8c933037ad
"use strict";

(function () {
  var enterModule = require('react-hot-loader').enterModule;

  enterModule && enterModule(module);
})();

var jumpToCode = function init() {
  // Classes of code we would like to highlight
  var missingCoverageClasses = ['.cbranch-no', '.cstat-no', '.fstat-no']; // We don't want to select elements that are direct descendants of another match

  var notSelector = ':not(' + missingCoverageClasses.join('):not(') + ') > '; // becomes `:not(a):not(b) > `
  // Selecter that finds elements on the page to which we can jump

  var selector = notSelector + missingCoverageClasses.join(', ' + notSelector); // becomes `:not(a):not(b) > a, :not(a):not(b) > b`
  // The NodeList of matching elements

  var missingCoverageElements = document.querySelectorAll(selector);
  var currentIndex;

  function toggleClass(index) {
    missingCoverageElements.item(currentIndex).classList.remove('highlighted');
    missingCoverageElements.item(index).classList.add('highlighted');
  }

  function makeCurrent(index) {
    toggleClass(index);
    currentIndex = index;
    missingCoverageElements.item(index).scrollIntoView({
      behavior: 'smooth',
      block: 'center',
      inline: 'center'
    });
  }

  function goToPrevious() {
    var nextIndex = 0;

    if (typeof currentIndex !== 'number' || currentIndex === 0) {
      nextIndex = missingCoverageElements.length - 1;
    } else if (missingCoverageElements.length > 1) {
      nextIndex = currentIndex - 1;
    }

    makeCurrent(nextIndex);
  }

  function goToNext() {
    var nextIndex = 0;

    if (typeof currentIndex === 'number' && currentIndex < missingCoverageElements.length - 1) {
      nextIndex = currentIndex + 1;
    }

    makeCurrent(nextIndex);
  }

  return function jump(event) {
    switch (event.which) {
      case 78: // n

      case 74:
        // j
        goToNext();
        break;

      case 66: // b

      case 75: // k

      case 80:
        // p
        goToPrevious();
        break;
    }
  };
}();

window.addEventListener('keydown', jumpToCode);
;

(function () {
  var reactHotLoader = require('react-hot-loader').default;

  var leaveModule = require('react-hot-loader').leaveModule;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(jumpToCode, "jumpToCode", "/home/charly/Uniclau/Iden3/web-wallet/__tests__/!reports/lcov-report/block-navigation.js");
  leaveModule(module);
})();

;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJsb2NrLW5hdmlnYXRpb24uanMiXSwibmFtZXMiOlsianVtcFRvQ29kZSIsImluaXQiLCJtaXNzaW5nQ292ZXJhZ2VDbGFzc2VzIiwibm90U2VsZWN0b3IiLCJqb2luIiwic2VsZWN0b3IiLCJtaXNzaW5nQ292ZXJhZ2VFbGVtZW50cyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImN1cnJlbnRJbmRleCIsInRvZ2dsZUNsYXNzIiwiaW5kZXgiLCJpdGVtIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYWRkIiwibWFrZUN1cnJlbnQiLCJzY3JvbGxJbnRvVmlldyIsImJlaGF2aW9yIiwiYmxvY2siLCJpbmxpbmUiLCJnb1RvUHJldmlvdXMiLCJuZXh0SW5kZXgiLCJsZW5ndGgiLCJnb1RvTmV4dCIsImp1bXAiLCJldmVudCIsIndoaWNoIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFJQSxVQUFVLEdBQUksU0FBU0MsSUFBVCxHQUFpQjtBQUNqQztBQUNBLE1BQUlDLHNCQUFzQixHQUFHLENBQUUsYUFBRixFQUFpQixXQUFqQixFQUE4QixXQUE5QixDQUE3QixDQUZpQyxDQUlqQzs7QUFDQSxNQUFJQyxXQUFXLEdBQUcsVUFBVUQsc0JBQXNCLENBQUNFLElBQXZCLENBQTRCLFFBQTVCLENBQVYsR0FBa0QsTUFBcEUsQ0FMaUMsQ0FLMkM7QUFFNUU7O0FBQ0EsTUFBSUMsUUFBUSxHQUFHRixXQUFXLEdBQUdELHNCQUFzQixDQUFDRSxJQUF2QixDQUE0QixPQUFPRCxXQUFuQyxDQUE3QixDQVJpQyxDQVE2QztBQUU5RTs7QUFDQSxNQUFJRyx1QkFBdUIsR0FBR0MsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQkgsUUFBMUIsQ0FBOUI7QUFFQSxNQUFJSSxZQUFKOztBQUVBLFdBQVNDLFdBQVQsQ0FBcUJDLEtBQXJCLEVBQTRCO0FBQzFCTCxJQUFBQSx1QkFBdUIsQ0FBQ00sSUFBeEIsQ0FBNkJILFlBQTdCLEVBQTJDSSxTQUEzQyxDQUFxREMsTUFBckQsQ0FBNEQsYUFBNUQ7QUFDQVIsSUFBQUEsdUJBQXVCLENBQUNNLElBQXhCLENBQTZCRCxLQUE3QixFQUFvQ0UsU0FBcEMsQ0FBOENFLEdBQTlDLENBQWtELGFBQWxEO0FBQ0Q7O0FBRUQsV0FBU0MsV0FBVCxDQUFxQkwsS0FBckIsRUFBNEI7QUFDMUJELElBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxDQUFYO0FBQ0FGLElBQUFBLFlBQVksR0FBR0UsS0FBZjtBQUNBTCxJQUFBQSx1QkFBdUIsQ0FBQ00sSUFBeEIsQ0FBNkJELEtBQTdCLEVBQ0dNLGNBREgsQ0FDa0I7QUFBRUMsTUFBQUEsUUFBUSxFQUFFLFFBQVo7QUFBc0JDLE1BQUFBLEtBQUssRUFBRSxRQUE3QjtBQUF1Q0MsTUFBQUEsTUFBTSxFQUFFO0FBQS9DLEtBRGxCO0FBRUQ7O0FBRUQsV0FBU0MsWUFBVCxHQUF3QjtBQUN0QixRQUFJQyxTQUFTLEdBQUcsQ0FBaEI7O0FBQ0EsUUFBSSxPQUFPYixZQUFQLEtBQXdCLFFBQXhCLElBQW9DQSxZQUFZLEtBQUssQ0FBekQsRUFBNEQ7QUFDMURhLE1BQUFBLFNBQVMsR0FBR2hCLHVCQUF1QixDQUFDaUIsTUFBeEIsR0FBaUMsQ0FBN0M7QUFDRCxLQUZELE1BRU8sSUFBSWpCLHVCQUF1QixDQUFDaUIsTUFBeEIsR0FBaUMsQ0FBckMsRUFBd0M7QUFDN0NELE1BQUFBLFNBQVMsR0FBR2IsWUFBWSxHQUFHLENBQTNCO0FBQ0Q7O0FBRURPLElBQUFBLFdBQVcsQ0FBQ00sU0FBRCxDQUFYO0FBQ0Q7O0FBRUQsV0FBU0UsUUFBVCxHQUFvQjtBQUNsQixRQUFJRixTQUFTLEdBQUcsQ0FBaEI7O0FBRUEsUUFBSSxPQUFPYixZQUFQLEtBQXdCLFFBQXhCLElBQW9DQSxZQUFZLEdBQUlILHVCQUF1QixDQUFDaUIsTUFBeEIsR0FBaUMsQ0FBekYsRUFBNkY7QUFDM0ZELE1BQUFBLFNBQVMsR0FBR2IsWUFBWSxHQUFHLENBQTNCO0FBQ0Q7O0FBRURPLElBQUFBLFdBQVcsQ0FBQ00sU0FBRCxDQUFYO0FBQ0Q7O0FBRUQsU0FBTyxTQUFTRyxJQUFULENBQWNDLEtBQWQsRUFBcUI7QUFDMUIsWUFBUUEsS0FBSyxDQUFDQyxLQUFkO0FBQ0UsV0FBSyxFQUFMLENBREYsQ0FDVzs7QUFDVCxXQUFLLEVBQUw7QUFBUztBQUNQSCxRQUFBQSxRQUFRO0FBQ1I7O0FBQ0YsV0FBSyxFQUFMLENBTEYsQ0FLVzs7QUFDVCxXQUFLLEVBQUwsQ0FORixDQU1XOztBQUNULFdBQUssRUFBTDtBQUFTO0FBQ1BILFFBQUFBLFlBQVk7QUFDWjtBQVRKO0FBV0QsR0FaRDtBQWFELENBN0RpQixFQUFsQjs7QUE4REFPLE1BQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0IsU0FBeEIsRUFBbUM3QixVQUFuQzs7Ozs7Ozs7Ozs7OzBCQTlESUEsVSIsInNvdXJjZXNDb250ZW50IjpbInZhciBqdW1wVG9Db2RlID0gKGZ1bmN0aW9uIGluaXQgKCkge1xuICAvLyBDbGFzc2VzIG9mIGNvZGUgd2Ugd291bGQgbGlrZSB0byBoaWdobGlnaHRcbiAgdmFyIG1pc3NpbmdDb3ZlcmFnZUNsYXNzZXMgPSBbICcuY2JyYW5jaC1ubycsICcuY3N0YXQtbm8nLCAnLmZzdGF0LW5vJyBdO1xuXG4gIC8vIFdlIGRvbid0IHdhbnQgdG8gc2VsZWN0IGVsZW1lbnRzIHRoYXQgYXJlIGRpcmVjdCBkZXNjZW5kYW50cyBvZiBhbm90aGVyIG1hdGNoXG4gIHZhciBub3RTZWxlY3RvciA9ICc6bm90KCcgKyBtaXNzaW5nQ292ZXJhZ2VDbGFzc2VzLmpvaW4oJyk6bm90KCcpICsgJykgPiAnOyAvLyBiZWNvbWVzIGA6bm90KGEpOm5vdChiKSA+IGBcblxuICAvLyBTZWxlY3RlciB0aGF0IGZpbmRzIGVsZW1lbnRzIG9uIHRoZSBwYWdlIHRvIHdoaWNoIHdlIGNhbiBqdW1wXG4gIHZhciBzZWxlY3RvciA9IG5vdFNlbGVjdG9yICsgbWlzc2luZ0NvdmVyYWdlQ2xhc3Nlcy5qb2luKCcsICcgKyBub3RTZWxlY3Rvcik7IC8vIGJlY29tZXMgYDpub3QoYSk6bm90KGIpID4gYSwgOm5vdChhKTpub3QoYikgPiBiYFxuXG4gIC8vIFRoZSBOb2RlTGlzdCBvZiBtYXRjaGluZyBlbGVtZW50c1xuICB2YXIgbWlzc2luZ0NvdmVyYWdlRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblxuICB2YXIgY3VycmVudEluZGV4O1xuXG4gIGZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGluZGV4KSB7XG4gICAgbWlzc2luZ0NvdmVyYWdlRWxlbWVudHMuaXRlbShjdXJyZW50SW5kZXgpLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodGVkJyk7XG4gICAgbWlzc2luZ0NvdmVyYWdlRWxlbWVudHMuaXRlbShpbmRleCkuY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0ZWQnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VDdXJyZW50KGluZGV4KSB7XG4gICAgdG9nZ2xlQ2xhc3MoaW5kZXgpO1xuICAgIGN1cnJlbnRJbmRleCA9IGluZGV4O1xuICAgIG1pc3NpbmdDb3ZlcmFnZUVsZW1lbnRzLml0ZW0oaW5kZXgpXG4gICAgICAuc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnY2VudGVyJywgaW5saW5lOiAnY2VudGVyJyB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvVG9QcmV2aW91cygpIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gMDtcbiAgICBpZiAodHlwZW9mIGN1cnJlbnRJbmRleCAhPT0gJ251bWJlcicgfHwgY3VycmVudEluZGV4ID09PSAwKSB7XG4gICAgICBuZXh0SW5kZXggPSBtaXNzaW5nQ292ZXJhZ2VFbGVtZW50cy5sZW5ndGggLSAxO1xuICAgIH0gZWxzZSBpZiAobWlzc2luZ0NvdmVyYWdlRWxlbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgbmV4dEluZGV4ID0gY3VycmVudEluZGV4IC0gMTtcbiAgICB9XG5cbiAgICBtYWtlQ3VycmVudChuZXh0SW5kZXgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Ub05leHQoKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IDA7XG5cbiAgICBpZiAodHlwZW9mIGN1cnJlbnRJbmRleCA9PT0gJ251bWJlcicgJiYgY3VycmVudEluZGV4IDwgKG1pc3NpbmdDb3ZlcmFnZUVsZW1lbnRzLmxlbmd0aCAtIDEpKSB7XG4gICAgICBuZXh0SW5kZXggPSBjdXJyZW50SW5kZXggKyAxO1xuICAgIH1cblxuICAgIG1ha2VDdXJyZW50KG5leHRJbmRleCk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24ganVtcChldmVudCkge1xuICAgIHN3aXRjaCAoZXZlbnQud2hpY2gpIHtcbiAgICAgIGNhc2UgNzg6IC8vIG5cbiAgICAgIGNhc2UgNzQ6IC8vIGpcbiAgICAgICAgZ29Ub05leHQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDY2OiAvLyBiXG4gICAgICBjYXNlIDc1OiAvLyBrXG4gICAgICBjYXNlIDgwOiAvLyBwXG4gICAgICAgIGdvVG9QcmV2aW91cygpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH07XG59KCkpO1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBqdW1wVG9Db2RlKTtcbiJdfQ==