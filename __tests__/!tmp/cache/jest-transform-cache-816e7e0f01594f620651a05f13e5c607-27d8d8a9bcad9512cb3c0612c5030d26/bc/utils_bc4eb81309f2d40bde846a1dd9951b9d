abe1b3d2b1299438e6dbafdce75c079d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.capitalizeFirstLetter = exports.toCamelCase = exports.pad = exports.sortArray = exports.mergeDeep = exports.createUniqueAlphanumericId = exports.areEqualObjects = exports.areEqualFunctions = exports.areEqualArrays = void 0;

(function () {
  var enterModule = require('react-hot-loader').enterModule;

  enterModule && enterModule(module);
})();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Check if two arrays are equal recursively: in length and in values,
 * even if they contain other arrays, objects...
 * @param {any[]} arr1 first array to compare
 * @param {any[]} arr2 second array to compare
 * @returns {boolean}
 */
var areEqualArrays = function areEqualArrays(arr1, arr2) {
  // if one of the arrays is a falsy value, return
  if (!arr1 || !arr2) {
    return false;
  } // compare lengths - can save a lot of time


  if (arr1.length !== arr2.length) {
    return false;
  }

  var firstArrayLength = arr1.length;

  for (var i = 0; i < firstArrayLength; i++) {
    // first check if are same type
    if (arr1[i].constructor !== arr2[i].constructor) {
      // Check if are they are of the same type
      return false;
    }

    if (arr1[i] instanceof Array && arr2[i] instanceof Array) {
      // Check if we have nested arrays
      // recurse into the nested arrays
      if (!this.areEqualArrays(arr1[i], arr2[i])) {
        return false;
      }
    } else if (arr1[i] instanceof Object && arr2[i] instanceof Object) {
      // Check if both are objects
      // deep comparison between objects
      if (!this.areEqualArrays(arr1[i], arr2[i])) {
        return false;
      }
    } else if (arr1[i] !== arr2[i]) {
      // Warning - two different object instances will never be equal: {x:20} != {x:20}
      return false;
    }
  }

  return true;
};
/**
 * Check if two function are the same
 * @param {Function} fn1 first function to compare
 * @param {Function} fn2 second function to compare
 * @returns {boolean}
 */


exports.areEqualArrays = areEqualArrays;

var areEqualFunctions = function areEqualFunctions(fn1, fn2) {
  return fn1 === fn2 || fn1.toString() === fn2.toString();
};
/**
 * Check if two objects are equal recursively: in length and in values,
 * even if they contain other object, arrays...
 * @param {Object} obj1 first object to compare
 * @param {Object} obj2 second object to compare
 * @returns {boolean}
 */


exports.areEqualFunctions = areEqualFunctions;

var areEqualObjects = function areEqualObjects(obj1, obj2) {
  // check if one of them is null or undefined return false
  if (!obj1 || !obj2) {
    return false;
  } // check they have same length


  if (Object.keys(obj1).length !== Object.keys(obj2).length) {
    return false;
  }

  var p;

  for (p in obj1) {
    if (typeof obj2[p] === 'undefined') {
      return false;
    }
  }

  for (p in obj1) {
    if (obj1[p]) {
      switch (obj1[p].constructor) {
        case Object:
          if (!this.areEqualObjects(obj1[p], obj2[p])) {
            return false;
          }

          break;

        case Function:
          if (typeof obj2[p] === 'undefined' || p !== 'equals' && obj1[p].toString() !== obj2[p].toString()) {
            return false;
          }

          break;

        default:
          if (obj1[p] !== obj2[p]) {
            return false;
          }

      }
    } else if (obj2[p]) {
      return false;
    }
  }

  for (p in obj2) {
    if (typeof obj1[p] === 'undefined') {
      return false;
    }
  }

  return true;
};
/**
 * Generate a random an unique key in base 36 such as "0.94rz766tytb"
 * @returns {string} with the generated alphanumeric key
 */


exports.areEqualObjects = areEqualObjects;

var createUniqueAlphanumericId = function createUniqueAlphanumericId() {
  var radix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 36;
  return Math.random().toString(radix);
};
/**
 * Performs a deep merge of two objects
 * @param {Object} target object
 * @param {Object} sources the other object
 */


exports.createUniqueAlphanumericId = createUniqueAlphanumericId;

var mergeDeep = function mergeDeep(target) {
  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    sources[_key - 1] = arguments[_key];
  }

  if (!sources.length) return target;
  var source = sources.shift();

  if (this.isObject(target) && this.isObject(source)) {
    for (var key in source) {
      if (this.isObject(source[key])) {
        if (!target[key]) Object.assign(target, _defineProperty({}, key, {}));
        this.mergeDeep(target[key], source[key]);
      } else {
        Object.assign(target, _defineProperty({}, key, source[key]));
      }
    }
  }

  return this.mergeDeep.apply(this, [target].concat(sources));
};
/**
 * Sort an array. Uses QuickSort algorithm: average time complexity is O(log n) (worst: O(n^2)) and
 * space complexity (worst) is O(log(n))
 * @param {any[]} target array to sort
 * @param {string} key if we have an array of objects and we want to sort by certain key
 * @returns {*}
 */


exports.mergeDeep = mergeDeep;

var sortArray = function sortArray(target) {
  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  // if only we have one element, finish
  if (target.length < 2) return target; // Take the pivot to compare in each iteration
  // in order to place the element on the right (bigger)
  // or in the left (lower)

  var pivot = target.pop(); // check if pivot is an Object and then we have sent a valid key to compare to sort

  if (pivot.constructor === Object) {
    if (!key || !pivot[key]) {
      throw new Error("==> sortArray(): no key sent or pivot (".concat(pivot, ") has not any key ").concat(key));
    }
  } // sub arrays to sort regarding the pivot


  var left = [];
  var right = []; // iterate over all the array

  target.forEach(function (element) {
    var _element = element.constructor === Object ? element[key] : element;

    var _pivot = pivot.constructor === Object ? pivot[key] : pivot; // check if pivot and current element they are same type


    if (_pivot.constructor !== _element.constructor) {
      throw new Error('==> sortArray(): not all elements are of the same type. Can\'t be sorted');
    } // check if current element is an object and it contains the sent key for sorting


    if (_element.constructor === Object && !_element[key]) {
      throw new Error("==> sortArray(): there is an object in the array (".concat(_element, ") \n                      that does not contain the key ").concat(key));
    } // if current element is lower than the pivot,
    // put it in the left array


    if (_element < _pivot) {
      left.push(_element);
    } else if (_element > _pivot) {
      right.push(_element);
    } else {
      // if current element and pivot are the same
      left.push(_element);
    }
  }); // create a new array, ordering left and right part with a recursive call to
  // this function of sorting. The pivot remains between boths arrays

  return [].concat(sortArray(left), pivot, sortArray(right));
};
/**
 * Pad a digit of one cypher returning a string with a 2 chars. I.e. 1 to "01"
 * @param {number} digit of one cypher
 * @returns {string} with two chars, the first one is a "0"
 */


exports.sortArray = sortArray;

var pad = function pad(digit) {
  return digit < 10 ? "0".concat(digit.toString()) : digit.toString();
};
/**
 * Convert a string to camelCase format. i.e. from Mykey to myKey
 * @param {string} str string to convert to camel Case
 * @returns {string} string in camelCase format
 */


exports.pad = pad;

var toCamelCase = function toCamelCase(str) {
  if (!str || str.constructor !== String) {
    throw new Error('[util] toCamelCase() expects a string');
  }

  return str.replace(/-([a-z])/g, function (g) {
    return g[1].toUpperCase();
  });
};

exports.toCamelCase = toCamelCase;

var capitalizeFirstLetter = function capitalizeFirstLetter(str) {
  return str ? str.charAt(0).toUpperCase() + str.slice(1) : str;
};

exports.capitalizeFirstLetter = capitalizeFirstLetter;
;

(function () {
  var reactHotLoader = require('react-hot-loader').default;

  var leaveModule = require('react-hot-loader').leaveModule;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(areEqualArrays, "areEqualArrays", "/home/charly/Uniclau/Iden3/web-wallet/src/helpers/utils.js");
  reactHotLoader.register(areEqualFunctions, "areEqualFunctions", "/home/charly/Uniclau/Iden3/web-wallet/src/helpers/utils.js");
  reactHotLoader.register(areEqualObjects, "areEqualObjects", "/home/charly/Uniclau/Iden3/web-wallet/src/helpers/utils.js");
  reactHotLoader.register(createUniqueAlphanumericId, "createUniqueAlphanumericId", "/home/charly/Uniclau/Iden3/web-wallet/src/helpers/utils.js");
  reactHotLoader.register(mergeDeep, "mergeDeep", "/home/charly/Uniclau/Iden3/web-wallet/src/helpers/utils.js");
  reactHotLoader.register(sortArray, "sortArray", "/home/charly/Uniclau/Iden3/web-wallet/src/helpers/utils.js");
  reactHotLoader.register(pad, "pad", "/home/charly/Uniclau/Iden3/web-wallet/src/helpers/utils.js");
  reactHotLoader.register(toCamelCase, "toCamelCase", "/home/charly/Uniclau/Iden3/web-wallet/src/helpers/utils.js");
  reactHotLoader.register(capitalizeFirstLetter, "capitalizeFirstLetter", "/home/charly/Uniclau/Iden3/web-wallet/src/helpers/utils.js");
  leaveModule(module);
})();

;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,