{"version":3,"sources":["content.js"],"names":["Content","minHeight","props","hasData","hasError","children","isFetching","Component","PropTypes","bool","isRequired","string","node","maxHeight"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;IAIMA,O;;;;;;;;;;;;;6BAgCK;AACT;;;;AAKE,aACE;AACE,QAAA,SAAS,EAAC,uBADZ;AAEE,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE,KAAKC,KAAL,CAAWD;AAAxB;AAFT,SAGG,KAAKC,KAAL,CAAWC,OAAX,IAAsB,CAAC,KAAKD,KAAL,CAAWE,QAAlC,IAA8C,KAAKF,KAAL,CAAWG,QAH5D,EAIG,CAAC,KAAKH,KAAL,CAAWC,OAAZ,IAAuB,CAAC,KAAKD,KAAL,CAAWE,QAAnC,IAA+C,CAAC,KAAKF,KAAL,CAAWI,UAA3D,IACC;AAAK,QAAA,SAAS,EAAC;AAAf,6BALJ,EASG,KAAKJ,KAAL,CAAWE,QAAX,IAAuB,CAAC,KAAKF,KAAL,CAAWI,UAAnC,IACC,yDAVJ,EAcG,KAAKJ,KAAL,CAAWI,UAAX,IACC;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,6BAAC,wBAAD,OADF,CAfJ,CADF;AAsBD;;;;;;;;;;;EA5DmBC,gB;;gBAAhBP,O,eACe;AACjB;;;AAGAM,EAAAA,UAAU,EAAEE,mBAAUC,IAAV,CAAeC,UAJV;;AAKjB;;;AAGAN,EAAAA,QAAQ,EAAEI,mBAAUC,IAAV,CAAeC,UARR;;AASjB;;;AAGAP,EAAAA,OAAO,EAAEK,mBAAUC,IAAV,CAAeC,UAZP;;AAajB;;;AAGAT,EAAAA,SAAS,EAAEO,mBAAUG,MAhBJ;;AAiBjB;;;AAGAN,EAAAA,QAAQ,EAAEG,mBAAUI,IAAV,CAAeF,UApBR;;AAqBjB;;;AAGAG,EAAAA,SAAS,EAAEL,mBAAUG;AAxBJ,C;;gBADfX,O,kBA4BkB;AACpBC,EAAAA,SAAS,EAAE;AADS,C;;eAmCTD,O;;;;;;;;;;;;;;0BA/DTA,O","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Spinner } from 'base_components';\n\nimport './content.scss';\n\n/**\n * Wrapper for dynamically loaded content that depending on the status/outcome\n * of the request shows a spinner, no-data message, error message, or the actual component\n */\nclass Content extends Component {\n  static propTypes = {\n    /*\n      isFetching flag\n     */\n    isFetching: PropTypes.bool.isRequired,\n    /*\n     *Boolean variable to show if there is an error\n     */\n    hasError: PropTypes.bool.isRequired,\n    /*\n      Determines whether to show the no-data message\n     */\n    hasData: PropTypes.bool.isRequired,\n    /*\n      Min height property to prevent loading spinner collapsing when its container has no height\n     */\n    minHeight: PropTypes.string,\n    /*\n      Children\n     */\n    children: PropTypes.node.isRequired,\n    /*\n      Max height property for dynamic widgets with dynamic info on which we wnt a maximum height\n     */\n    maxHeight: PropTypes.string,\n  };\n\n  static defaultProps = {\n    minHeight: 'auto',\n  };\n\n  render() {\n  /* const cmptClasses = classNames({\n      'i3-ww-widget__content': true,\n      'i3-ww-widget__content--minimized': this.props.isMinimized,\n    }); */\n\n    return (\n      <div\n        className=\"i3-ww-widget__content\"\n        style={{ minHeight: this.props.minHeight }}>\n        {this.props.hasData && !this.props.hasError && this.props.children}\n        {!this.props.hasData && !this.props.hasError && !this.props.isFetching && (\n          <div className=\"i3-ww-widget__content-alert\">\n            No data available\n          </div>\n        )}\n        {this.props.hasError && !this.props.isFetching && (\n          <div>\n            Unkown error\n          </div>\n        )}\n        {this.props.isFetching && (\n          <div className=\"i3-ww-widget__content-spinner\">\n            <Spinner />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Content;\n"]}