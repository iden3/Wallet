48fdd676c0d256a9d73feb5cac4c6b0c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _base_components = require("base_components");

require("./camera.scss");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

(function () {
  var enterModule = require('react-hot-loader').enterModule;

  enterModule && enterModule(module);
})();

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Class to show the cam in the browser using its webcam.
 * By default will show a button to do a screenshot and
 * we will add this functionality with a method in this class.
 */
var Camera =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Camera, _PureComponent);

  function Camera() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Camera);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Camera)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleVideoStream", function (stream) {
      _this._setStream(stream);

      _this.videoElement.play().then(function () {
        // handle each animation in the video stream before repaint
        // used i.e. when we are scanning a QR code
        if (_this.props.handleRequestAnimationFrame) {
          _this.props.handleRequestAnimationFrame(_this.videoElement, _this.canvasElement);
        }
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "takeSnapShot", function () {
      var context = _this.canvasElement.getContext('2d');

      context.drawImage(_this.videoElement, 0, 0, 800, 600);
      return _this.canvasElement.toDataURL('image/jpeg', 0.5);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "videoError", function (error) {
      console.error('Error accessing to the cam:', error);
    });

    return _this;
  }

  _createClass(Camera, [{
    key: "componentDidMount",

    /**
     * Once component is mounted need to get media device (video) if it's supported
     * by the browser. An alternative should use window.URL.createObjectURL(stream),
     * but it's going to be deprecated.
     * So we are using the MediaStream object returned (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)
     * in the promise to set the src of the HTML media object (https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject)
     */
    value: function componentDidMount() {
      var _this2 = this;

      // For more information, please visit: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
      if (navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia({
          video: {
            facingMode: 'environment' // to attempt to get the front camera on phones

          }
        }).then(function (stream) {
          _this2.handleVideoStream(stream);
        }).catch(function (error) {
          _this2.videoError(error);
        });
      }
    }
    /**
     * Check if there is any callback to trigger when camera is closed. If yes, trigger it
     */

  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.onClose) {
        this.props.onClose(this.videoElement);
      }
    }
    /**
     * Set the source of the video element.
     * We need to set the srcObject depending the browser.
     * Please, for more information, visit: https://github.com/addyosmani/getUserMedia.js/issues/64
     * @param {*} stream with the info fo the video stream
     */

  }, {
    key: "_setStream",

    /**
     * Set the stream of the video regarding the browser,
     * since is managed different
     * @param {*} stream stream of the video
     * @private
     */
    value: function _setStream(stream) {
      // set the stream, regarding the browser we srcObject is different
      if (this.videoElement.mozSrcObject !== undefined) {
        // FF18a
        this.videoElement.mozSrcObject = stream;
      } else if (this.videoElement.srcObject !== undefined) {
        // Chrome
        this.videoElement.srcObject = stream;
      } else if (window.webkitURL !== undefined) {
        // older Chrome browsers
        this.videoElement.srcObject = window.webkitURL.createObjectURL(stream);
      } else {
        // FF16a, 17a
        this.videoElement.src = stream;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      return _react.default.createElement("div", {
        className: "i3-ww-camera"
      }, _react.default.createElement("div", {
        className: "i3-ww-camera__container"
      }, _react.default.createElement("video", {
        playsInline: "true",
        muted: "true",
        ref: function ref(input) {
          _this3.videoElement = input;
        }
      }), this.props.showButton && _react.default.createElement(_base_components.Button, {
        type: "primary",
        htmlType: "button",
        onClick: this.props.onClickButton ? this.props.onClickButton : this.takeSnapShot
      }, this.props.messageButton)), _react.default.createElement("canvas", {
        ref: function ref(canvas) {
          _this3.canvasElement = canvas;
        },
        style: {
          display: 'none'
        }
      }));
    }
  }, {
    key: "__reactstandin__regenerateByEval",
    // @ts-ignore
    value: function __reactstandin__regenerateByEval(key, code) {
      // @ts-ignore
      this[key] = eval(code);
    }
  }]);

  return Camera;
}(_react.PureComponent);

_defineProperty(Camera, "propTypes", {
  /*
   Message to who in the button if shown
   */
  messageButton: _propTypes.default.string,

  /*
   Function to trigger if button is shown
   */
  onClickButton: _propTypes.default.func,

  /*
   Function to trigger when camera is unmounted
   */
  onClose: _propTypes.default.func,

  /*
   Function to handle each video stream repaint, i.e. for qr-scanner
   */
  handleRequestAnimationFrame: _propTypes.default.func,

  /*
   Show button in the camera
   */
  showButton: _propTypes.default.bool
});

_defineProperty(Camera, "defaultProps", {
  messageButton: 'Take a screenshot',
  showButton: false
});

var _default = Camera;
var _default2 = _default;
exports.default = _default2;
;

(function () {
  var reactHotLoader = require('react-hot-loader').default;

  var leaveModule = require('react-hot-loader').leaveModule;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(Camera, "Camera", "/home/charly/Uniclau/Iden3/web-wallet/src/components/camera/camera.js");
  reactHotLoader.register(_default, "default", "/home/charly/Uniclau/Iden3/web-wallet/src/components/camera/camera.js");
  leaveModule(module);
})();

;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,