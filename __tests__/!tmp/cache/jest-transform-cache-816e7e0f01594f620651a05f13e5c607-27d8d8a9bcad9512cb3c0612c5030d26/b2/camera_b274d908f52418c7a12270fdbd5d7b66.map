{"version":3,"sources":["camera.js"],"names":["Camera","stream","_setStream","videoElement","play","then","props","handleRequestAnimationFrame","canvasElement","context","getContext","drawImage","toDataURL","error","console","navigator","mediaDevices","getUserMedia","video","facingMode","handleVideoStream","catch","videoError","onClose","mozSrcObject","undefined","srcObject","window","webkitURL","createObjectURL","src","input","showButton","onClickButton","takeSnapShot","messageButton","canvas","display","PureComponent","PropTypes","string","func","bool"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'base_components';\n\nimport './camera.scss';\n\n/**\n * Class to show the cam in the browser using its webcam.\n * By default will show a button to do a screenshot and\n * we will add this functionality with a method in this class.\n */\nclass Camera extends PureComponent {\n  static propTypes = {\n    /*\n     Message to who in the button if shown\n     */\n    messageButton: PropTypes.string,\n    /*\n     Function to trigger if button is shown\n     */\n    onClickButton: PropTypes.func,\n    /*\n     Function to trigger when camera is unmounted\n     */\n    onClose: PropTypes.func,\n    /*\n     Function to handle each video stream repaint, i.e. for qr-scanner\n     */\n    handleRequestAnimationFrame: PropTypes.func,\n    /*\n     Show button in the camera\n     */\n    showButton: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    messageButton: 'Take a screenshot',\n    showButton: false,\n  };\n\n  /**\n   * Once component is mounted need to get media device (video) if it's supported\n   * by the browser. An alternative should use window.URL.createObjectURL(stream),\n   * but it's going to be deprecated.\n   * So we are using the MediaStream object returned (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n   * in the promise to set the src of the HTML media object (https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject)\n   */\n  componentDidMount() {\n    // For more information, please visit: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    if (navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: 'environment', // to attempt to get the front camera on phones\n        },\n      })\n        .then((stream) => {\n          this.handleVideoStream(stream);\n        })\n        .catch((error) => {\n          this.videoError(error);\n        });\n    }\n  }\n\n  /**\n   * Check if there is any callback to trigger when camera is closed. If yes, trigger it\n   */\n  componentWillUnmount() {\n    if (this.props.onClose) {\n      this.props.onClose(this.videoElement);\n    }\n  }\n\n  /**\n   * Set the source of the video element.\n   * We need to set the srcObject depending the browser.\n   * Please, for more information, visit: https://github.com/addyosmani/getUserMedia.js/issues/64\n   * @param {*} stream with the info fo the video stream\n   */\n  handleVideoStream = (stream) => {\n    this._setStream(stream);\n    this.videoElement.play()\n      .then(() => {\n        // handle each animation in the video stream before repaint\n        // used i.e. when we are scanning a QR code\n        if (this.props.handleRequestAnimationFrame) {\n          this.props.handleRequestAnimationFrame(this.videoElement, this.canvasElement);\n        }\n      });\n  };\n\n  /**\n   * Take a snapshot if camera is configured with this feature.\n   * It's shown in the canvas element of the camera.\n   * @returns {string} with the snapshot taken\n   */\n  takeSnapShot = () => {\n    const context = this.canvasElement.getContext('2d');\n\n    context.drawImage(this.videoElement, 0, 0, 800, 600);\n    return this.canvasElement.toDataURL('image/jpeg', 0.5);\n  };\n\n  /**\n   * Handle the error if we can't access to the cam.\n   * If there is another tab, application or browser using it,\n   * you'll receive an \"AbortError\" type of error\n   * @param error\n   */\n  videoError = (error) => {\n    console.error('Error accessing to the cam:', error);\n  };\n\n  /**\n   * Set the stream of the video regarding the browser,\n   * since is managed different\n   * @param {*} stream stream of the video\n   * @private\n   */\n  _setStream(stream) {\n    // set the stream, regarding the browser we srcObject is different\n    if (this.videoElement.mozSrcObject !== undefined) { // FF18a\n      this.videoElement.mozSrcObject = stream;\n    } else if (this.videoElement.srcObject !== undefined) { // Chrome\n      this.videoElement.srcObject = stream;\n    } else if (window.webkitURL !== undefined) { // older Chrome browsers\n      this.videoElement.srcObject = window.webkitURL.createObjectURL(stream);\n    } else { // FF16a, 17a\n      this.videoElement.src = stream;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"i3-ww-camera\">\n        <div className=\"i3-ww-camera__container\">\n          <video\n            playsInline=\"true\"\n            muted=\"true\"\n            ref={(input) => { this.videoElement = input; }} />\n          {this.props.showButton\n            && (\n            <Button\n              type=\"primary\"\n              htmlType=\"button\"\n              onClick={this.props.onClickButton ? this.props.onClickButton : this.takeSnapShot}>\n                {this.props.messageButton}\n            </Button>\n            )\n          }\n        </div>\n        <canvas\n          ref={(canvas) => { this.canvasElement = canvas; }}\n          style={{ display: 'none' }} />\n      </div>\n    );\n  }\n}\n\nexport default Camera;\n"]}