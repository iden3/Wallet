6d42c12fbbaf72fe4e5c7a7b3b433478
"use strict";

(function () {
  var enterModule = require('react-hot-loader').enterModule;

  enterModule && enterModule(module);
})();

var webpack = require('webpack');

var merge = require('webpack-merge');

var common = require('./webpack.config.js'); // some libraries look for process.env.NODE_ENV to optimize and webpack doesn't include it


var environmentPlugin = new webpack.DefinePlugin({
  'process.env.NODE_ENV': JSON.stringify('development')
});
module.exports = merge(common, {
  mode: 'development',
  devServer: {
    contentBase: './dist'
  },
  devtool: 'cheap-module-source-map',
  plugins: [environmentPlugin, // This is necessary to emit hot updates (currently CSS only):
  new webpack.HotModuleReplacementPlugin()],
  module: {
    rules: [{
      test: /\.(sa|sc|c)ss$/,
      use: [// Adds CSS to the DOM by injecting a <style> tag --> https://github.com/webpack-contrib/style-loader
      'style-loader', // Interprets @import and url() like import/require() and will resolve them -->  https://github.com/webpack-contrib/css-loader
      {
        loader: 'css-loader',
        options: {
          importLoaders: 3,
          module: true,
          // to configure the generated identification: [name of the component]_[name of class/id]_[random unique hash]
          localIdentName: '[name]_[local]_[hash:base64]',
          sourceMap: true,
          minimize: true
        }
      }, // Loads a Sass/SCSS file and compiles it to CSS --> https://github.com/webpack-contrib/sass-loader
      'sass-loader', // @import SASS resources into every required SASS module --> https://github.com/shakacode/sass-resources-loader
      {
        loader: 'sass-resources-loader',
        options: {
          // Provide path to the file with resources
          resources: ['./src/styles/_variables.scss', './src/styles/_mixins.scss']
        }
      }]
    }]
  }
});
;

(function () {
  var reactHotLoader = require('react-hot-loader').default;

  var leaveModule = require('react-hot-loader').leaveModule;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(environmentPlugin, "environmentPlugin", "/home/charly/Uniclau/Iden3/web-wallet/webpack.dev.js");
  leaveModule(module);
})();

;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2suZGV2LmpzIl0sIm5hbWVzIjpbIndlYnBhY2siLCJyZXF1aXJlIiwibWVyZ2UiLCJjb21tb24iLCJlbnZpcm9ubWVudFBsdWdpbiIsIkRlZmluZVBsdWdpbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJtb2R1bGUiLCJleHBvcnRzIiwibW9kZSIsImRldlNlcnZlciIsImNvbnRlbnRCYXNlIiwiZGV2dG9vbCIsInBsdWdpbnMiLCJIb3RNb2R1bGVSZXBsYWNlbWVudFBsdWdpbiIsInJ1bGVzIiwidGVzdCIsInVzZSIsImxvYWRlciIsIm9wdGlvbnMiLCJpbXBvcnRMb2FkZXJzIiwibG9jYWxJZGVudE5hbWUiLCJzb3VyY2VNYXAiLCJtaW5pbWl6ZSIsInJlc291cmNlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLElBQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLGVBQUQsQ0FBckI7O0FBQ0EsSUFBTUUsTUFBTSxHQUFHRixPQUFPLENBQUMscUJBQUQsQ0FBdEIsQyxDQUVBOzs7QUFDQSxJQUFNRyxpQkFBaUIsR0FBRyxJQUFJSixPQUFPLENBQUNLLFlBQVosQ0FBeUI7QUFDakQsMEJBQXdCQyxJQUFJLENBQUNDLFNBQUwsQ0FBZSxhQUFmO0FBRHlCLENBQXpCLENBQTFCO0FBSUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlAsS0FBSyxDQUFDQyxNQUFELEVBQVM7QUFDN0JPLEVBQUFBLElBQUksRUFBRSxhQUR1QjtBQUU3QkMsRUFBQUEsU0FBUyxFQUFFO0FBQ1RDLElBQUFBLFdBQVcsRUFBRTtBQURKLEdBRmtCO0FBSzdCQyxFQUFBQSxPQUFPLEVBQUUseUJBTG9CO0FBTTdCQyxFQUFBQSxPQUFPLEVBQUUsQ0FDUFYsaUJBRE8sRUFFUDtBQUNBLE1BQUlKLE9BQU8sQ0FBQ2UsMEJBQVosRUFITyxDQU5vQjtBQWM3QlAsRUFBQUEsTUFBTSxFQUFFO0FBQ05RLElBQUFBLEtBQUssRUFBRSxDQUNMO0FBQ0VDLE1BQUFBLElBQUksRUFBRSxnQkFEUjtBQUVFQyxNQUFBQSxHQUFHLEVBQUUsQ0FDSDtBQUNBLG9CQUZHLEVBR0g7QUFDQTtBQUNFQyxRQUFBQSxNQUFNLEVBQUUsWUFEVjtBQUVFQyxRQUFBQSxPQUFPLEVBQUU7QUFDUEMsVUFBQUEsYUFBYSxFQUFFLENBRFI7QUFFUGIsVUFBQUEsTUFBTSxFQUFFLElBRkQ7QUFHUDtBQUNBYyxVQUFBQSxjQUFjLEVBQUUsOEJBSlQ7QUFLUEMsVUFBQUEsU0FBUyxFQUFFLElBTEo7QUFNUEMsVUFBQUEsUUFBUSxFQUFFO0FBTkg7QUFGWCxPQUpHLEVBZUg7QUFDQSxtQkFoQkcsRUFpQkg7QUFDQTtBQUNFTCxRQUFBQSxNQUFNLEVBQUUsdUJBRFY7QUFFRUMsUUFBQUEsT0FBTyxFQUFFO0FBQ1A7QUFDQUssVUFBQUEsU0FBUyxFQUFFLENBQ1QsOEJBRFMsRUFFVCwyQkFGUztBQUZKO0FBRlgsT0FsQkc7QUFGUCxLQURLO0FBREQ7QUFkcUIsQ0FBVCxDQUF0Qjs7Ozs7Ozs7Ozs7OzBCQUpNckIsaUIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB3ZWJwYWNrID0gcmVxdWlyZSgnd2VicGFjaycpO1xuY29uc3QgbWVyZ2UgPSByZXF1aXJlKCd3ZWJwYWNrLW1lcmdlJyk7XG5jb25zdCBjb21tb24gPSByZXF1aXJlKCcuL3dlYnBhY2suY29uZmlnLmpzJyk7XG5cbi8vIHNvbWUgbGlicmFyaWVzIGxvb2sgZm9yIHByb2Nlc3MuZW52Lk5PREVfRU5WIHRvIG9wdGltaXplIGFuZCB3ZWJwYWNrIGRvZXNuJ3QgaW5jbHVkZSBpdFxuY29uc3QgZW52aXJvbm1lbnRQbHVnaW4gPSBuZXcgd2VicGFjay5EZWZpbmVQbHVnaW4oe1xuICAncHJvY2Vzcy5lbnYuTk9ERV9FTlYnOiBKU09OLnN0cmluZ2lmeSgnZGV2ZWxvcG1lbnQnKSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1lcmdlKGNvbW1vbiwge1xuICBtb2RlOiAnZGV2ZWxvcG1lbnQnLFxuICBkZXZTZXJ2ZXI6IHtcbiAgICBjb250ZW50QmFzZTogJy4vZGlzdCcsXG4gIH0sXG4gIGRldnRvb2w6ICdjaGVhcC1tb2R1bGUtc291cmNlLW1hcCcsXG4gIHBsdWdpbnM6IFtcbiAgICBlbnZpcm9ubWVudFBsdWdpbixcbiAgICAvLyBUaGlzIGlzIG5lY2Vzc2FyeSB0byBlbWl0IGhvdCB1cGRhdGVzIChjdXJyZW50bHkgQ1NTIG9ubHkpOlxuICAgIG5ldyB3ZWJwYWNrLkhvdE1vZHVsZVJlcGxhY2VtZW50UGx1Z2luKCksXG4gICAgLy8gd2UgbmVlZCBpdCB0byBjcmVhdGUgYSBzdHlsZS5bY29udGVudGhhc2hdLmNzcyBmaWxlIHdoZW4gZG8gYSBob3QgdXBkYXRlIG9mIGFueSBTQ1NTIGZpbGVcbiAgICAvLyBzaW5jZSB3ZWJwYWNrICh2ZXJzaW9uIDQuMykgaGFzIGEga25vd24gcHJvYmxlbSBhYm91dCB0aGlzLiBTbyBlYWNoIHRpbWUgd2UgY2hhbmdlIGEgU0NTUyBGaWxlXG4gICAgLy8gaXQnbGwgZ2VuZXJhdGUgYSBuZXcgaGFzaCwgYW5kIHdlIGNhbiBzZWUgdGhlIGNoYW5nZXNcbiAgXSxcbiAgbW9kdWxlOiB7XG4gICAgcnVsZXM6IFtcbiAgICAgIHtcbiAgICAgICAgdGVzdDogL1xcLihzYXxzY3xjKXNzJC8sXG4gICAgICAgIHVzZTogW1xuICAgICAgICAgIC8vIEFkZHMgQ1NTIHRvIHRoZSBET00gYnkgaW5qZWN0aW5nIGEgPHN0eWxlPiB0YWcgLS0+IGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyXG4gICAgICAgICAgJ3N0eWxlLWxvYWRlcicsXG4gICAgICAgICAgLy8gSW50ZXJwcmV0cyBAaW1wb3J0IGFuZCB1cmwoKSBsaWtlIGltcG9ydC9yZXF1aXJlKCkgYW5kIHdpbGwgcmVzb2x2ZSB0aGVtIC0tPiAgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9jc3MtbG9hZGVyXG4gICAgICAgICAge1xuICAgICAgICAgICAgbG9hZGVyOiAnY3NzLWxvYWRlcicsXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgIGltcG9ydExvYWRlcnM6IDMsXG4gICAgICAgICAgICAgIG1vZHVsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgLy8gdG8gY29uZmlndXJlIHRoZSBnZW5lcmF0ZWQgaWRlbnRpZmljYXRpb246IFtuYW1lIG9mIHRoZSBjb21wb25lbnRdX1tuYW1lIG9mIGNsYXNzL2lkXV9bcmFuZG9tIHVuaXF1ZSBoYXNoXVxuICAgICAgICAgICAgICBsb2NhbElkZW50TmFtZTogJ1tuYW1lXV9bbG9jYWxdX1toYXNoOmJhc2U2NF0nLFxuICAgICAgICAgICAgICBzb3VyY2VNYXA6IHRydWUsXG4gICAgICAgICAgICAgIG1pbmltaXplOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIC8vIExvYWRzIGEgU2Fzcy9TQ1NTIGZpbGUgYW5kIGNvbXBpbGVzIGl0IHRvIENTUyAtLT4gaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zYXNzLWxvYWRlclxuICAgICAgICAgICdzYXNzLWxvYWRlcicsXG4gICAgICAgICAgLy8gQGltcG9ydCBTQVNTIHJlc291cmNlcyBpbnRvIGV2ZXJ5IHJlcXVpcmVkIFNBU1MgbW9kdWxlIC0tPiBodHRwczovL2dpdGh1Yi5jb20vc2hha2Fjb2RlL3Nhc3MtcmVzb3VyY2VzLWxvYWRlclxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGxvYWRlcjogJ3Nhc3MtcmVzb3VyY2VzLWxvYWRlcicsXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgIC8vIFByb3ZpZGUgcGF0aCB0byB0aGUgZmlsZSB3aXRoIHJlc291cmNlc1xuICAgICAgICAgICAgICByZXNvdXJjZXM6IFtcbiAgICAgICAgICAgICAgICAnLi9zcmMvc3R5bGVzL192YXJpYWJsZXMuc2NzcycsXG4gICAgICAgICAgICAgICAgJy4vc3JjL3N0eWxlcy9fbWl4aW5zLnNjc3MnLFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxufSk7XG4iXX0=