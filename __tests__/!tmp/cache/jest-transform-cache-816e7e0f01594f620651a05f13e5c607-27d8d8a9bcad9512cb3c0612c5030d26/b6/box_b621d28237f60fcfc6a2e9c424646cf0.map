{"version":3,"sources":["box.js"],"names":["boxTypes","Object","values","BOX_CONSTANTS","TYPE","Box","container","isVisible","props","show","event","state","contains","target","stopPropagation","focus","keyCode","onClose","lastActive","setState","document","activeElement","addEventListener","handleFocus","handleClose","prevState","removeEventListener","Container","type","SIDE_PANEL","SidePanel","PopUp","header","title","side","toggleBoxVisibility","setActiveContainer","content","_getContent","Component","PropTypes","object","isRequired","func","bool","string","oneOf"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Portal,\n  PopUp,\n  SidePanel,\n} from 'base_components';\nimport * as BOX_CONSTANTS from 'constants/box';\nimport Header from './header/header';\n\nimport './box.scss';\n\nconst boxTypes = Object.values(BOX_CONSTANTS.TYPE);\n\n/**\n * Element to show information sent by another component. We can show it in a\n * regular emergent pop-up or in a sidebar that appears from the left or right.\n * The responsibility of the state of the box (if is shown or not) it's here.\n * Shouldn't be in the parent. The parent will send a call back to trigger\n * anything that it's important to execute after the Box is hidden.\n */\nclass Box extends Component {\n  static propTypes = {\n    /*\n    The content to show\n     */\n    content: PropTypes.object.isRequired,\n    /*\n      Call back from any parent to trigger when box is closed\n     */\n    onClose: PropTypes.func,\n    /*\n     Show the box or not\n     */\n    show: PropTypes.bool,\n    /*\n     Side to show the side panel, prop only valid if prop type is 'side'\n     */\n    side: PropTypes.string,\n    /*\n     Title to show in the header\n     */\n    title: PropTypes.string,\n    /*\n    The type of box to show\n     */\n    type: PropTypes.oneOf(boxTypes).isRequired,\n  };\n\n  state = {\n    container: {},\n    isVisible: this.props.show,\n  };\n\n  /**\n   * Set the new state if visibility changes regading parent component\n   * @param {object} props new props from parent\n   * @param {object} state current state before have been updated\n   * @returns {object} updated state\n   */\n  static getDerivedStateFromProps(props, state) {\n    if (props.show !== state.isVisible) {\n      return { isVisible: props.show };\n    }\n    return state;\n  }\n\n  /**\n   * Remove the listeners to the focus and escape and return the focus\n   * to the las element active before show the Box\n   */\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleClose, true);\n    document.removeEventListener('focus', this.handleFocus, true);\n    this.lastActive.focus();\n  }\n\n  /**\n   * Set the focus for usability in the content shown in the  box\n   * @param {object} event\n   */\n  handleFocus = (event) => {\n    if (this.state.isVisible && !this.state.container.contains(event.target)) {\n      event.stopPropagation();\n      this.state.container.focus();\n    }\n  };\n\n  /**\n   * If key escape (code 27) pressed, close the box\n   * @param {number} keyCode\n   */\n  handleClose = ({ keyCode }) => {\n    if (this.state.isVisible && keyCode && keyCode === 27) {\n      this.props.onClose();\n      this.lastActive.focus();\n    }\n  };\n\n  /**\n   * Handle the focus of the inner element and close with\n   * the inner content of the box. For accessibility\n   * @param {object} container React node\n   */\n  setActiveContainer = (container) => {\n    this.setState({\n      container,\n    }, () => {\n      this.lastActive = document.activeElement;\n      this.state.container.focus();\n      document.addEventListener('focus', this.handleFocus, true);\n      document.addEventListener('keydown', this.handleClose, true);\n    });\n  };\n\n  /**\n   * It change the visibility of the box, used when, i.e., in the\n   * onClose callback sent to the child component (SidePanel or PopUp)\n   */\n  toggleBoxVisibility = () => {\n    this.setState((prevState) => {\n      if (prevState.isVisible && this.props.onClose) {\n        this.props.onClose();\n      }\n\n      return { isVisible: !prevState.isVisible };\n    });\n  };\n\n  /**\n   * Get the content to render, a SidePanel or a Pop-up\n   * @returns {object} React node with a SidePanel or a Popup component\n   * @private\n   */\n  _getContent() {\n    const Container = this.props.type === BOX_CONSTANTS.TYPE.SIDE_PANEL ? SidePanel : PopUp;\n    const header = (<Header title={this.props.title} onClose={this.props.onClose} />);\n\n    return (\n      <Container\n        header={header}\n        side={this.props.side}\n        onClose={this.toggleBoxVisibility}\n        setActiveContainer={this.setActiveContainer}\n        isVisible={this.state.isVisible}>\n        {this.props.content}\n      </Container>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"i3-ww-box\">\n        <Portal parentClassName=\"i3-ww-box\">\n          { this._getContent() }\n        </Portal>\n      </div>\n    );\n  }\n}\n\nexport default Box;\n"]}