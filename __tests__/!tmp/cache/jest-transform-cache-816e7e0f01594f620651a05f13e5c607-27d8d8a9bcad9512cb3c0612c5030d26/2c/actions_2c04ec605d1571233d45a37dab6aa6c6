3918cae2216a3ec0c224171f6d283415
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleFetchingEmittedClaims = handleFetchingEmittedClaims;
exports.handleFetchingReceivedClaims = handleFetchingReceivedClaims;

var _constants = require("./constants");

(function () {
  var enterModule = require('react-hot-loader').enterModule;

  enterModule && enterModule(module);
})();

function fetchingEmittedClaims() {
  return {
    type: _constants.FETCHING_EMITTED_CLAIMS
  };
}

function fetchingEmittedClaimsSuccess(response) {
  return {
    type: _constants.FETCHING_EMITTED_CLAIMS_SUCCESS,
    response: response
  };
}

function fetchingEmittedClaimsError(error) {
  console.log(error);
  return {
    type: _constants.FETCHING_EMITTED_CLAIMS_ERROR,
    error: 'Fetching emitted claims error'
  };
}

function fetchingReceivedClaims() {
  return {
    type: _constants.FETCHING_RECEIVED_CLAIMS
  };
}

function fetchingReceivedClaimsSuccess(response) {
  return {
    type: _constants.FETCHING_RECEIVED_CLAIMS_SUCCESS,
    response: response
  };
}

function fetchingReceivedClaimsError(error) {
  console.log(error);
  return {
    type: _constants.FETCHING_RECEIVED_CLAIMS_ERROR,
    error: 'Fetching received claims error'
  };
}

function handleFetchingEmittedClaims() {
  return function (dispatch) {
    dispatch(fetchingEmittedClaims());
    return Promise.resolve().then(function (_ref) {
      var data = _ref.data;
      dispatch(fetchingEmittedClaimsSuccess({
        claims: data
      }));
    }).catch(function (error) {
      return dispatch(fetchingEmittedClaimsError(error));
    });
  };
}

function handleFetchingReceivedClaims() {
  return function (dispatch) {
    dispatch(fetchingReceivedClaims());
    return Promise.resolve().then(function (_ref2) {
      var data = _ref2.data;
      dispatch(fetchingReceivedClaimsSuccess({
        claims: data
      }));
    }).catch(function (error) {
      return dispatch(fetchingReceivedClaimsError(error));
    });
  };
}

;

(function () {
  var reactHotLoader = require('react-hot-loader').default;

  var leaveModule = require('react-hot-loader').leaveModule;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(fetchingEmittedClaims, "fetchingEmittedClaims", "/home/charly/Uniclau/Iden3/web-wallet/src/state/claims/actions.js");
  reactHotLoader.register(fetchingEmittedClaimsSuccess, "fetchingEmittedClaimsSuccess", "/home/charly/Uniclau/Iden3/web-wallet/src/state/claims/actions.js");
  reactHotLoader.register(fetchingEmittedClaimsError, "fetchingEmittedClaimsError", "/home/charly/Uniclau/Iden3/web-wallet/src/state/claims/actions.js");
  reactHotLoader.register(fetchingReceivedClaims, "fetchingReceivedClaims", "/home/charly/Uniclau/Iden3/web-wallet/src/state/claims/actions.js");
  reactHotLoader.register(fetchingReceivedClaimsSuccess, "fetchingReceivedClaimsSuccess", "/home/charly/Uniclau/Iden3/web-wallet/src/state/claims/actions.js");
  reactHotLoader.register(fetchingReceivedClaimsError, "fetchingReceivedClaimsError", "/home/charly/Uniclau/Iden3/web-wallet/src/state/claims/actions.js");
  reactHotLoader.register(handleFetchingEmittedClaims, "handleFetchingEmittedClaims", "/home/charly/Uniclau/Iden3/web-wallet/src/state/claims/actions.js");
  reactHotLoader.register(handleFetchingReceivedClaims, "handleFetchingReceivedClaims", "/home/charly/Uniclau/Iden3/web-wallet/src/state/claims/actions.js");
  leaveModule(module);
})();

;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGlvbnMuanMiXSwibmFtZXMiOlsiZmV0Y2hpbmdFbWl0dGVkQ2xhaW1zIiwidHlwZSIsIkZFVENISU5HX0VNSVRURURfQ0xBSU1TIiwiZmV0Y2hpbmdFbWl0dGVkQ2xhaW1zU3VjY2VzcyIsInJlc3BvbnNlIiwiRkVUQ0hJTkdfRU1JVFRFRF9DTEFJTVNfU1VDQ0VTUyIsImZldGNoaW5nRW1pdHRlZENsYWltc0Vycm9yIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwiRkVUQ0hJTkdfRU1JVFRFRF9DTEFJTVNfRVJST1IiLCJmZXRjaGluZ1JlY2VpdmVkQ2xhaW1zIiwiRkVUQ0hJTkdfUkVDRUlWRURfQ0xBSU1TIiwiZmV0Y2hpbmdSZWNlaXZlZENsYWltc1N1Y2Nlc3MiLCJGRVRDSElOR19SRUNFSVZFRF9DTEFJTVNfU1VDQ0VTUyIsImZldGNoaW5nUmVjZWl2ZWRDbGFpbXNFcnJvciIsIkZFVENISU5HX1JFQ0VJVkVEX0NMQUlNU19FUlJPUiIsImhhbmRsZUZldGNoaW5nRW1pdHRlZENsYWltcyIsImRpc3BhdGNoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiZGF0YSIsImNsYWltcyIsImNhdGNoIiwiaGFuZGxlRmV0Y2hpbmdSZWNlaXZlZENsYWltcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7QUFVQSxTQUFTQSxxQkFBVCxHQUFpQztBQUMvQixTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBRUM7QUFERCxHQUFQO0FBR0Q7O0FBRUQsU0FBU0MsNEJBQVQsQ0FBc0NDLFFBQXRDLEVBQWdEO0FBQzlDLFNBQU87QUFDTEgsSUFBQUEsSUFBSSxFQUFFSSwwQ0FERDtBQUVMRCxJQUFBQSxRQUFRLEVBQVJBO0FBRkssR0FBUDtBQUlEOztBQUVELFNBQVNFLDBCQUFULENBQW9DQyxLQUFwQyxFQUEyQztBQUN6Q0MsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlGLEtBQVo7QUFDQSxTQUFPO0FBQ0xOLElBQUFBLElBQUksRUFBRVMsd0NBREQ7QUFFTEgsSUFBQUEsS0FBSyxFQUFFO0FBRkYsR0FBUDtBQUlEOztBQUVELFNBQVNJLHNCQUFULEdBQWtDO0FBQ2hDLFNBQU87QUFDTFYsSUFBQUEsSUFBSSxFQUFFVztBQURELEdBQVA7QUFHRDs7QUFFRCxTQUFTQyw2QkFBVCxDQUF1Q1QsUUFBdkMsRUFBaUQ7QUFDL0MsU0FBTztBQUNMSCxJQUFBQSxJQUFJLEVBQUVhLDJDQUREO0FBRUxWLElBQUFBLFFBQVEsRUFBUkE7QUFGSyxHQUFQO0FBSUQ7O0FBRUQsU0FBU1csMkJBQVQsQ0FBcUNSLEtBQXJDLEVBQTRDO0FBQzFDQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsS0FBWjtBQUNBLFNBQU87QUFDTE4sSUFBQUEsSUFBSSxFQUFFZSx5Q0FERDtBQUVMVCxJQUFBQSxLQUFLLEVBQUU7QUFGRixHQUFQO0FBSUQ7O0FBRU0sU0FBU1UsMkJBQVQsR0FBdUM7QUFDNUMsU0FBTyxVQUFVQyxRQUFWLEVBQW9CO0FBQ3pCQSxJQUFBQSxRQUFRLENBQUNsQixxQkFBcUIsRUFBdEIsQ0FBUjtBQUNBLFdBQU9tQixPQUFPLENBQUNDLE9BQVIsR0FDSkMsSUFESSxDQUNDLGdCQUFjO0FBQUEsVUFBWEMsSUFBVyxRQUFYQSxJQUFXO0FBQ2xCSixNQUFBQSxRQUFRLENBQUNmLDRCQUE0QixDQUFDO0FBQ3BDb0IsUUFBQUEsTUFBTSxFQUFFRDtBQUQ0QixPQUFELENBQTdCLENBQVI7QUFHRCxLQUxJLEVBTUpFLEtBTkksQ0FNRSxVQUFBakIsS0FBSztBQUFBLGFBQUlXLFFBQVEsQ0FBQ1osMEJBQTBCLENBQUNDLEtBQUQsQ0FBM0IsQ0FBWjtBQUFBLEtBTlAsQ0FBUDtBQU9ELEdBVEQ7QUFVRDs7QUFFTSxTQUFTa0IsNEJBQVQsR0FBd0M7QUFDN0MsU0FBTyxVQUFVUCxRQUFWLEVBQW9CO0FBQ3pCQSxJQUFBQSxRQUFRLENBQUNQLHNCQUFzQixFQUF2QixDQUFSO0FBQ0EsV0FBT1EsT0FBTyxDQUFDQyxPQUFSLEdBQ0pDLElBREksQ0FDQyxpQkFBYztBQUFBLFVBQVhDLElBQVcsU0FBWEEsSUFBVztBQUNsQkosTUFBQUEsUUFBUSxDQUFDTCw2QkFBNkIsQ0FBQztBQUNyQ1UsUUFBQUEsTUFBTSxFQUFFRDtBQUQ2QixPQUFELENBQTlCLENBQVI7QUFHRCxLQUxJLEVBTUpFLEtBTkksQ0FNRSxVQUFBakIsS0FBSztBQUFBLGFBQUlXLFFBQVEsQ0FBQ0gsMkJBQTJCLENBQUNSLEtBQUQsQ0FBNUIsQ0FBWjtBQUFBLEtBTlAsQ0FBUDtBQU9ELEdBVEQ7QUFVRDs7Ozs7Ozs7Ozs7OzswQkFsRVFQLHFCOzBCQU1BRyw0QjswQkFPQUcsMEI7MEJBUUFLLHNCOzBCQU1BRSw2QjswQkFPQUUsMkI7MEJBUU9FLDJCOzBCQWFBUSw0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEZFVENISU5HX0VNSVRURURfQ0xBSU1TLFxuICBGRVRDSElOR19FTUlUVEVEX0NMQUlNU19TVUNDRVNTLFxuICBGRVRDSElOR19FTUlUVEVEX0NMQUlNU19FUlJPUixcbiAgRkVUQ0hJTkdfUkVDRUlWRURfQ0xBSU1TLFxuICBGRVRDSElOR19SRUNFSVZFRF9DTEFJTVNfRVJST1IsXG4gIEZFVENISU5HX1JFQ0VJVkVEX0NMQUlNU19TVUNDRVNTLFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5cblxuZnVuY3Rpb24gZmV0Y2hpbmdFbWl0dGVkQ2xhaW1zKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IEZFVENISU5HX0VNSVRURURfQ0xBSU1TLFxuICB9O1xufVxuXG5mdW5jdGlvbiBmZXRjaGluZ0VtaXR0ZWRDbGFpbXNTdWNjZXNzKHJlc3BvbnNlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogRkVUQ0hJTkdfRU1JVFRFRF9DTEFJTVNfU1VDQ0VTUyxcbiAgICByZXNwb25zZSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmV0Y2hpbmdFbWl0dGVkQ2xhaW1zRXJyb3IoZXJyb3IpIHtcbiAgY29uc29sZS5sb2coZXJyb3IpO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IEZFVENISU5HX0VNSVRURURfQ0xBSU1TX0VSUk9SLFxuICAgIGVycm9yOiAnRmV0Y2hpbmcgZW1pdHRlZCBjbGFpbXMgZXJyb3InLFxuICB9O1xufVxuXG5mdW5jdGlvbiBmZXRjaGluZ1JlY2VpdmVkQ2xhaW1zKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IEZFVENISU5HX1JFQ0VJVkVEX0NMQUlNUyxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmV0Y2hpbmdSZWNlaXZlZENsYWltc1N1Y2Nlc3MocmVzcG9uc2UpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBGRVRDSElOR19SRUNFSVZFRF9DTEFJTVNfU1VDQ0VTUyxcbiAgICByZXNwb25zZSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmV0Y2hpbmdSZWNlaXZlZENsYWltc0Vycm9yKGVycm9yKSB7XG4gIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBGRVRDSElOR19SRUNFSVZFRF9DTEFJTVNfRVJST1IsXG4gICAgZXJyb3I6ICdGZXRjaGluZyByZWNlaXZlZCBjbGFpbXMgZXJyb3InLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlRmV0Y2hpbmdFbWl0dGVkQ2xhaW1zKCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgZGlzcGF0Y2goZmV0Y2hpbmdFbWl0dGVkQ2xhaW1zKCkpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKGZldGNoaW5nRW1pdHRlZENsYWltc1N1Y2Nlc3Moe1xuICAgICAgICAgIGNsYWltczogZGF0YSxcbiAgICAgICAgfSkpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiBkaXNwYXRjaChmZXRjaGluZ0VtaXR0ZWRDbGFpbXNFcnJvcihlcnJvcikpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUZldGNoaW5nUmVjZWl2ZWRDbGFpbXMoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICBkaXNwYXRjaChmZXRjaGluZ1JlY2VpdmVkQ2xhaW1zKCkpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKGZldGNoaW5nUmVjZWl2ZWRDbGFpbXNTdWNjZXNzKHtcbiAgICAgICAgICBjbGFpbXM6IGRhdGEsXG4gICAgICAgIH0pKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyb3IgPT4gZGlzcGF0Y2goZmV0Y2hpbmdSZWNlaXZlZENsYWltc0Vycm9yKGVycm9yKSkpO1xuICB9O1xufVxuIl19