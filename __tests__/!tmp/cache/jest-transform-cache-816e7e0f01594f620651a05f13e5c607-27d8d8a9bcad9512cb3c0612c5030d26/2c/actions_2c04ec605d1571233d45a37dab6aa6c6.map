{"version":3,"sources":["actions.js"],"names":["fetchingEmittedClaims","type","FETCHING_EMITTED_CLAIMS","fetchingEmittedClaimsSuccess","response","FETCHING_EMITTED_CLAIMS_SUCCESS","fetchingEmittedClaimsError","error","console","log","FETCHING_EMITTED_CLAIMS_ERROR","fetchingReceivedClaims","FETCHING_RECEIVED_CLAIMS","fetchingReceivedClaimsSuccess","FETCHING_RECEIVED_CLAIMS_SUCCESS","fetchingReceivedClaimsError","FETCHING_RECEIVED_CLAIMS_ERROR","handleFetchingEmittedClaims","dispatch","Promise","resolve","then","data","claims","catch","handleFetchingReceivedClaims"],"mappings":";;;;;;;;AAAA;;;;;;;;AAUA,SAASA,qBAAT,GAAiC;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAEC;AADD,GAAP;AAGD;;AAED,SAASC,4BAAT,CAAsCC,QAAtC,EAAgD;AAC9C,SAAO;AACLH,IAAAA,IAAI,EAAEI,0CADD;AAELD,IAAAA,QAAQ,EAARA;AAFK,GAAP;AAID;;AAED,SAASE,0BAAT,CAAoCC,KAApC,EAA2C;AACzCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAO;AACLN,IAAAA,IAAI,EAAES,wCADD;AAELH,IAAAA,KAAK,EAAE;AAFF,GAAP;AAID;;AAED,SAASI,sBAAT,GAAkC;AAChC,SAAO;AACLV,IAAAA,IAAI,EAAEW;AADD,GAAP;AAGD;;AAED,SAASC,6BAAT,CAAuCT,QAAvC,EAAiD;AAC/C,SAAO;AACLH,IAAAA,IAAI,EAAEa,2CADD;AAELV,IAAAA,QAAQ,EAARA;AAFK,GAAP;AAID;;AAED,SAASW,2BAAT,CAAqCR,KAArC,EAA4C;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAO;AACLN,IAAAA,IAAI,EAAEe,yCADD;AAELT,IAAAA,KAAK,EAAE;AAFF,GAAP;AAID;;AAEM,SAASU,2BAAT,GAAuC;AAC5C,SAAO,UAAUC,QAAV,EAAoB;AACzBA,IAAAA,QAAQ,CAAClB,qBAAqB,EAAtB,CAAR;AACA,WAAOmB,OAAO,CAACC,OAAR,GACJC,IADI,CACC,gBAAc;AAAA,UAAXC,IAAW,QAAXA,IAAW;AAClBJ,MAAAA,QAAQ,CAACf,4BAA4B,CAAC;AACpCoB,QAAAA,MAAM,EAAED;AAD4B,OAAD,CAA7B,CAAR;AAGD,KALI,EAMJE,KANI,CAME,UAAAjB,KAAK;AAAA,aAAIW,QAAQ,CAACZ,0BAA0B,CAACC,KAAD,CAA3B,CAAZ;AAAA,KANP,CAAP;AAOD,GATD;AAUD;;AAEM,SAASkB,4BAAT,GAAwC;AAC7C,SAAO,UAAUP,QAAV,EAAoB;AACzBA,IAAAA,QAAQ,CAACP,sBAAsB,EAAvB,CAAR;AACA,WAAOQ,OAAO,CAACC,OAAR,GACJC,IADI,CACC,iBAAc;AAAA,UAAXC,IAAW,SAAXA,IAAW;AAClBJ,MAAAA,QAAQ,CAACL,6BAA6B,CAAC;AACrCU,QAAAA,MAAM,EAAED;AAD6B,OAAD,CAA9B,CAAR;AAGD,KALI,EAMJE,KANI,CAME,UAAAjB,KAAK;AAAA,aAAIW,QAAQ,CAACH,2BAA2B,CAACR,KAAD,CAA5B,CAAZ;AAAA,KANP,CAAP;AAOD,GATD;AAUD;;;;;;;;;;;;;0BAlEQP,qB;0BAMAG,4B;0BAOAG,0B;0BAQAK,sB;0BAMAE,6B;0BAOAE,2B;0BAQOE,2B;0BAaAQ,4B","sourcesContent":["import {\n  FETCHING_EMITTED_CLAIMS,\n  FETCHING_EMITTED_CLAIMS_SUCCESS,\n  FETCHING_EMITTED_CLAIMS_ERROR,\n  FETCHING_RECEIVED_CLAIMS,\n  FETCHING_RECEIVED_CLAIMS_ERROR,\n  FETCHING_RECEIVED_CLAIMS_SUCCESS,\n} from './constants';\n\n\nfunction fetchingEmittedClaims() {\n  return {\n    type: FETCHING_EMITTED_CLAIMS,\n  };\n}\n\nfunction fetchingEmittedClaimsSuccess(response) {\n  return {\n    type: FETCHING_EMITTED_CLAIMS_SUCCESS,\n    response,\n  };\n}\n\nfunction fetchingEmittedClaimsError(error) {\n  console.log(error);\n  return {\n    type: FETCHING_EMITTED_CLAIMS_ERROR,\n    error: 'Fetching emitted claims error',\n  };\n}\n\nfunction fetchingReceivedClaims() {\n  return {\n    type: FETCHING_RECEIVED_CLAIMS,\n  };\n}\n\nfunction fetchingReceivedClaimsSuccess(response) {\n  return {\n    type: FETCHING_RECEIVED_CLAIMS_SUCCESS,\n    response,\n  };\n}\n\nfunction fetchingReceivedClaimsError(error) {\n  console.log(error);\n  return {\n    type: FETCHING_RECEIVED_CLAIMS_ERROR,\n    error: 'Fetching received claims error',\n  };\n}\n\nexport function handleFetchingEmittedClaims() {\n  return function (dispatch) {\n    dispatch(fetchingEmittedClaims());\n    return Promise.resolve()\n      .then(({ data }) => {\n        dispatch(fetchingEmittedClaimsSuccess({\n          claims: data,\n        }));\n      })\n      .catch(error => dispatch(fetchingEmittedClaimsError(error)));\n  };\n}\n\nexport function handleFetchingReceivedClaims() {\n  return function (dispatch) {\n    dispatch(fetchingReceivedClaims());\n    return Promise.resolve()\n      .then(({ data }) => {\n        dispatch(fetchingReceivedClaimsSuccess({\n          claims: data,\n        }));\n      })\n      .catch(error => dispatch(fetchingReceivedClaimsError(error)));\n  };\n}\n"]}