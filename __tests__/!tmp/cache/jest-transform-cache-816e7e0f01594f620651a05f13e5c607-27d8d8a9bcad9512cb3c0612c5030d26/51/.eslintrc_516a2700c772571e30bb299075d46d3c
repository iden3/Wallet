bca85ea408c8d6bd8a60afd656f434e4
"use strict";

// Eslint configuration file.
// Configuration documentation: http://eslint.org/docs/user-guide/configuring.html
// Rules documentation: http://eslint.org/docs/rules/
//
// Codes:
// 0 - turn the rule off
// 1 - turn the rule on as a warning (doesn't affect exit code)
// 2 - turn the rule on as an error (exit code is 1 when triggered)
module.exports = {
  "extends": "airbnb",
  "settings": {
    "import/resolver": "webpack" // to use the aliases created in the webpack.config file

  },
  "env": {
    "es6": true,
    "browser": true,
    "node": true,
    "jest": true
  },
  "parser": "babel-eslint",
  // to use global variables as document along the app
  "rules": {
    "class-methods-use-this": [0],
    "no-unused-vars": [2, {
      "varsIgnorePattern": "export^"
    }],
    "func-names": [2, "as-needed"],
    "global-require": [0],
    "max-len": ["error", {
      "code": 120,
      "comments": 200
    }],
    "no-underscore-dangle": [0],
    "import/no-extraneous-dependencies": ["error", {
      "devDependencies": true,
      "optionalDependencies": false,
      "peerDependencies": false
    }],
    "no-plusplus": [0],
    "no-restricted-syntax": [0],
    "react/prefer-stateless-function": [0],
    "react/jsx-filename-extension": [1, {
      "extensions": [".js", ".jsx"]
    }],
    "react/require-default-props": [0],
    "react/destructuring-assignment": [0],
    "react/jsx-closing-bracket-location": [1, 'after-props'],
    "react/forbid-prop-types": [0]
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi5lc2xpbnRyYy5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2IsYUFBVyxRQURFO0FBRWIsY0FBWTtBQUNSLHVCQUFtQixTQURYLENBQ3FCOztBQURyQixHQUZDO0FBS2IsU0FBTztBQUNILFdBQU8sSUFESjtBQUVILGVBQVcsSUFGUjtBQUdILFlBQVEsSUFITDtBQUlILFlBQVE7QUFKTCxHQUxNO0FBV2IsWUFBVSxjQVhHO0FBV2E7QUFDMUIsV0FBUztBQUNMLDhCQUEwQixDQUFDLENBQUQsQ0FEckI7QUFFTCxzQkFBa0IsQ0FBQyxDQUFELEVBQUk7QUFBRSwyQkFBcUI7QUFBdkIsS0FBSixDQUZiO0FBR0wsa0JBQWMsQ0FBQyxDQUFELEVBQUksV0FBSixDQUhUO0FBSUwsc0JBQWtCLENBQUMsQ0FBRCxDQUpiO0FBS0wsZUFBVyxDQUFDLE9BQUQsRUFBVTtBQUFFLGNBQVEsR0FBVjtBQUFlLGtCQUFZO0FBQTNCLEtBQVYsQ0FMTjtBQU1MLDRCQUF3QixDQUFDLENBQUQsQ0FObkI7QUFPTCx5Q0FBcUMsQ0FDakMsT0FEaUMsRUFFakM7QUFBQyx5QkFBbUIsSUFBcEI7QUFBMEIsOEJBQXdCLEtBQWxEO0FBQXlELDBCQUFvQjtBQUE3RSxLQUZpQyxDQVBoQztBQVdMLG1CQUFlLENBQUMsQ0FBRCxDQVhWO0FBWUwsNEJBQXdCLENBQUMsQ0FBRCxDQVpuQjtBQWFMLHVDQUFtQyxDQUFDLENBQUQsQ0FiOUI7QUFjTCxvQ0FBZ0MsQ0FBQyxDQUFELEVBQUk7QUFBRSxvQkFBYyxDQUFDLEtBQUQsRUFBUSxNQUFSO0FBQWhCLEtBQUosQ0FkM0I7QUFlTCxtQ0FBK0IsQ0FBQyxDQUFELENBZjFCO0FBZ0JMLHNDQUFrQyxDQUFDLENBQUQsQ0FoQjdCO0FBaUJMLDBDQUFzQyxDQUFDLENBQUQsRUFBSSxhQUFKLENBakJqQztBQWtCTCwrQkFBMkIsQ0FBQyxDQUFEO0FBbEJ0QjtBQVpJLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRXNsaW50IGNvbmZpZ3VyYXRpb24gZmlsZS5cbi8vIENvbmZpZ3VyYXRpb24gZG9jdW1lbnRhdGlvbjogaHR0cDovL2VzbGludC5vcmcvZG9jcy91c2VyLWd1aWRlL2NvbmZpZ3VyaW5nLmh0bWxcbi8vIFJ1bGVzIGRvY3VtZW50YXRpb246IGh0dHA6Ly9lc2xpbnQub3JnL2RvY3MvcnVsZXMvXG4vL1xuLy8gQ29kZXM6XG4vLyAwIC0gdHVybiB0aGUgcnVsZSBvZmZcbi8vIDEgLSB0dXJuIHRoZSBydWxlIG9uIGFzIGEgd2FybmluZyAoZG9lc24ndCBhZmZlY3QgZXhpdCBjb2RlKVxuLy8gMiAtIHR1cm4gdGhlIHJ1bGUgb24gYXMgYW4gZXJyb3IgKGV4aXQgY29kZSBpcyAxIHdoZW4gdHJpZ2dlcmVkKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBcImV4dGVuZHNcIjogXCJhaXJibmJcIixcbiAgICBcInNldHRpbmdzXCI6IHtcbiAgICAgICAgXCJpbXBvcnQvcmVzb2x2ZXJcIjogXCJ3ZWJwYWNrXCIgLy8gdG8gdXNlIHRoZSBhbGlhc2VzIGNyZWF0ZWQgaW4gdGhlIHdlYnBhY2suY29uZmlnIGZpbGVcbiAgICB9LFxuICAgIFwiZW52XCI6IHtcbiAgICAgICAgXCJlczZcIjogdHJ1ZSxcbiAgICAgICAgXCJicm93c2VyXCI6IHRydWUsXG4gICAgICAgIFwibm9kZVwiOiB0cnVlLFxuICAgICAgICBcImplc3RcIjogdHJ1ZVxuICAgIH0sXG4gICAgXCJwYXJzZXJcIjogXCJiYWJlbC1lc2xpbnRcIiwgLy8gdG8gdXNlIGdsb2JhbCB2YXJpYWJsZXMgYXMgZG9jdW1lbnQgYWxvbmcgdGhlIGFwcFxuICAgIFwicnVsZXNcIjoge1xuICAgICAgICBcImNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcIjogWzBdLFxuICAgICAgICBcIm5vLXVudXNlZC12YXJzXCI6IFsyLCB7IFwidmFyc0lnbm9yZVBhdHRlcm5cIjogXCJleHBvcnReXCIgfV0sXG4gICAgICAgIFwiZnVuYy1uYW1lc1wiOiBbMiwgXCJhcy1uZWVkZWRcIl0sXG4gICAgICAgIFwiZ2xvYmFsLXJlcXVpcmVcIjogWzBdLFxuICAgICAgICBcIm1heC1sZW5cIjogW1wiZXJyb3JcIiwgeyBcImNvZGVcIjogMTIwLCBcImNvbW1lbnRzXCI6IDIwMCB9XSxcbiAgICAgICAgXCJuby11bmRlcnNjb3JlLWRhbmdsZVwiOiBbMF0sXG4gICAgICAgIFwiaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzXCI6IFtcbiAgICAgICAgICAgIFwiZXJyb3JcIixcbiAgICAgICAgICAgIHtcImRldkRlcGVuZGVuY2llc1wiOiB0cnVlLCBcIm9wdGlvbmFsRGVwZW5kZW5jaWVzXCI6IGZhbHNlLCBcInBlZXJEZXBlbmRlbmNpZXNcIjogZmFsc2V9XG4gICAgICAgIF0sXG4gICAgICAgIFwibm8tcGx1c3BsdXNcIjogWzBdLFxuICAgICAgICBcIm5vLXJlc3RyaWN0ZWQtc3ludGF4XCI6IFswXSxcbiAgICAgICAgXCJyZWFjdC9wcmVmZXItc3RhdGVsZXNzLWZ1bmN0aW9uXCI6IFswXSxcbiAgICAgICAgXCJyZWFjdC9qc3gtZmlsZW5hbWUtZXh0ZW5zaW9uXCI6IFsxLCB7IFwiZXh0ZW5zaW9uc1wiOiBbXCIuanNcIiwgXCIuanN4XCJdIH1dLFxuICAgICAgICBcInJlYWN0L3JlcXVpcmUtZGVmYXVsdC1wcm9wc1wiOiBbMF0sXG4gICAgICAgIFwicmVhY3QvZGVzdHJ1Y3R1cmluZy1hc3NpZ25tZW50XCI6IFswXSxcbiAgICAgICAgXCJyZWFjdC9qc3gtY2xvc2luZy1icmFja2V0LWxvY2F0aW9uXCI6IFsxLCAnYWZ0ZXItcHJvcHMnXSxcbiAgICAgICAgXCJyZWFjdC9mb3JiaWQtcHJvcC10eXBlc1wiOiBbMF0sXG4gICAgfVxufTsiXX0=