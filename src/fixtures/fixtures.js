import { utils } from 'helpers';
import * as CLAIMS from 'constants/claim';

const randomVersion = function () {
  return Math.floor(Math.random() * (10000 - 1)) + 1;
};

/**
 * Fixtures to import to if we don't have relay or just we wanna mock
 * the list of claims to work.
 *
 * @type {*[]}
 */
export const claims = [
  {
    id: 1,
    issuer: '1 -- FIRST',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.ASSIGN_NAME.NAME,
    version: randomVersion(),
    isPinned: true,
    groups: ['group a', 'group b'],
  },
  {
    id: 2,
    issuer: '2 b',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.ASSIGN_NAME.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: [],
  },
  {
    id: 3,
    issuer: '3 c',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.ASSIGN_NAME.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: [],
  },
  {
    id: 4,
    issuer: '4 d',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.ASSIGN_NAME.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: [],
  },
  {
    id: 5,
    issuer: '5 e',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.ASSIGN_NAME.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: [],
  },
  {
    id: 6,
    issuer: '6 f',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.ASSIGN_NAME.NAME,
    version: randomVersion(),
    isPinned: true,
    groups: ['group b'],
  },
  {
    id: 7,
    issuer: '7 g',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.ASSIGN_NAME.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: ['group a', 'group c'],
  },
  {
    id: 8,
    issuer: '8 a',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.SIGN.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: [],
  },
  {
    id: 9,
    issuer: '9 b',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.SIGN.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: [],
  },
  {
    id: 10,
    issuer: '10 c',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.SIGN.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: [],
  },
  {
    id: 11,
    issuer: '11 d',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.SIGN.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: [],
  },
  {
    id: 12,
    issuer: '12 e',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.SIGN.NAME,
    version: randomVersion(),
    isPinned: true,
    groups: [],
  },
  {
    id: 13,
    issuer: '13 f',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.SIGN.NAME,
    version: randomVersion(),
    isPinned: true,
    groups: [],
  },
  {
    id: 14,
    issuer: '14 g',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.SIGN.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: [],
  },
  {
    id: 15,
    issuer: '15 a',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.BASIC.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: ['group d'],
  },
  {
    id: 16,
    issuer: '16 b',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.BASIC.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: ['group d'],
  },
  {
    id: 17,
    issuer: '17 b',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.BASIC.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: ['group d'],
  },
  {
    id: 18,
    issuer: '18 c',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.BASIC.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: ['group d'],
  },
  {
    id: 19,
    issuer: '19 d',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.BASIC.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: ['group a'],
  },
  {
    id: 20,
    issuer: '20 e',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.BASIC.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: [],
  },
  {
    id: 21,
    issuer: '21 f',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.BASIC.NAME,
    version: randomVersion(),
    isPinned: true,
    groups: [],
  },
  {
    id: 22,
    issuer: '22 -- LAST',
    date: utils.generateRandomDate(),
    type: CLAIMS.TYPE.BASIC.NAME,
    version: randomVersion(),
    isPinned: false,
    groups: ['group b'],
  },
];
